{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"getBoundByRegion\", {\n    enumerable: true,\n    get: function () {\n      return getBoundByRegion;\n    }\n  });\n  /**\n   * Code taken from https://github.com/react-native-maps/react-native-maps/issues/356\n   * Solution by https://github.com/MatsMaker\n   */\n\n  const getBoundByRegion = function (region) {\n    let scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    /*\n     * Latitude : max/min +90 to -90\n     * Longitude : max/min +180 to -180\n     */\n    // Of course we can do it mo compact but it wait is more obvious\n    const calcMinLatByOffset = (lng, offset) => {\n      const factValue = lng - offset;\n      if (factValue < -90) {\n        return (90 + offset) * -1;\n      }\n      return factValue;\n    };\n    const calcMaxLatByOffset = (lng, offset) => {\n      const factValue = lng + offset;\n      if (90 < factValue) {\n        return (90 - offset) * -1;\n      }\n      return factValue;\n    };\n    const calcMinLngByOffset = (lng, offset) => {\n      const factValue = lng - offset;\n      if (factValue < -180) {\n        return (180 + offset) * -1;\n      }\n      return factValue;\n    };\n    const calcMaxLngByOffset = (lng, offset) => {\n      const factValue = lng + offset;\n      if (180 < factValue) {\n        return (180 - offset) * -1;\n      }\n      return factValue;\n    };\n    const latOffset = region.latitudeDelta / 2 * scale;\n    const lngD = region.longitudeDelta < -180 ? 360 + region.longitudeDelta : region.longitudeDelta;\n    const lngOffset = lngD / 2 * scale;\n\n    // bounds.nw.lng,\n    //           bounds.se.lat,\n    //           bounds.se.lng,\n    //           bounds.nw.lat\n\n    return [calcMinLngByOffset(region.longitude, lngOffset),\n    // westLng - min lng\n    calcMinLatByOffset(region.latitude, latOffset),\n    // southLat - min lat\n    calcMaxLngByOffset(region.longitude, lngOffset),\n    // eastLng - max lng\n    calcMaxLatByOffset(region.latitude, latOffset) // northLat - max lat\n    ];\n  };\n});","lineCount":71,"map":[[7,2,6,0,"Object"],[7,8,6,0],[7,9,6,0,"defineProperty"],[7,23,6,0],[7,24,6,0,"exports"],[7,31,6,0],[8,4,6,0,"enumerable"],[8,14,6,0],[9,4,6,0,"get"],[9,7,6,0],[9,18,6,0,"get"],[9,19,6,0],[10,6,6,0],[10,13,6,0,"getBoundByRegion"],[10,29,6,0],[11,4,6,0],[12,2,6,0],[13,2,1,0],[14,0,2,0],[15,0,3,0],[16,0,4,0],[18,2,6,7],[18,8,6,13,"getBoundByRegion"],[18,24,6,29],[18,27,6,32],[18,36,6,32,"getBoundByRegion"],[18,37,6,42,"region"],[18,43,6,48],[18,45,6,50],[19,4,7,2],[19,8,7,6,"scale"],[19,13,7,11],[19,16,7,14,"arguments"],[19,25,7,23],[19,26,7,24,"length"],[19,32,7,30],[19,35,7,33],[19,36,7,34],[19,40,7,38,"arguments"],[19,49,7,47],[19,50,7,48],[19,51,7,49],[19,52,7,50],[19,57,7,55,"undefined"],[19,66,7,64],[19,69,7,67,"arguments"],[19,78,7,76],[19,79,7,77],[19,80,7,78],[19,81,7,79],[19,84,7,82],[19,85,7,83],[20,4,8,2],[21,0,9,0],[22,0,10,0],[23,0,11,0],[24,4,12,2],[25,4,13,2],[25,10,13,8,"calcMinLatByOffset"],[25,28,13,26],[25,31,13,29,"calcMinLatByOffset"],[25,32,13,30,"lng"],[25,35,13,33],[25,37,13,35,"offset"],[25,43,13,41],[25,48,13,46],[26,6,14,4],[26,12,14,10,"factValue"],[26,21,14,19],[26,24,14,22,"lng"],[26,27,14,25],[26,30,14,28,"offset"],[26,36,14,34],[27,6,15,4],[27,10,15,8,"factValue"],[27,19,15,17],[27,22,15,20],[27,23,15,21],[27,25,15,23],[27,27,15,25],[28,8,16,6],[28,15,16,13],[28,16,16,14],[28,18,16,16],[28,21,16,19,"offset"],[28,27,16,25],[28,31,16,29],[28,32,16,30],[28,33,16,31],[29,6,17,4],[30,6,18,4],[30,13,18,11,"factValue"],[30,22,18,20],[31,4,19,2],[31,5,19,3],[32,4,20,2],[32,10,20,8,"calcMaxLatByOffset"],[32,28,20,26],[32,31,20,29,"calcMaxLatByOffset"],[32,32,20,30,"lng"],[32,35,20,33],[32,37,20,35,"offset"],[32,43,20,41],[32,48,20,46],[33,6,21,4],[33,12,21,10,"factValue"],[33,21,21,19],[33,24,21,22,"lng"],[33,27,21,25],[33,30,21,28,"offset"],[33,36,21,34],[34,6,22,4],[34,10,22,8],[34,12,22,10],[34,15,22,13,"factValue"],[34,24,22,22],[34,26,22,24],[35,8,23,6],[35,15,23,13],[35,16,23,14],[35,18,23,16],[35,21,23,19,"offset"],[35,27,23,25],[35,31,23,29],[35,32,23,30],[35,33,23,31],[36,6,24,4],[37,6,25,4],[37,13,25,11,"factValue"],[37,22,25,20],[38,4,26,2],[38,5,26,3],[39,4,27,2],[39,10,27,8,"calcMinLngByOffset"],[39,28,27,26],[39,31,27,29,"calcMinLngByOffset"],[39,32,27,30,"lng"],[39,35,27,33],[39,37,27,35,"offset"],[39,43,27,41],[39,48,27,46],[40,6,28,4],[40,12,28,10,"factValue"],[40,21,28,19],[40,24,28,22,"lng"],[40,27,28,25],[40,30,28,28,"offset"],[40,36,28,34],[41,6,29,4],[41,10,29,8,"factValue"],[41,19,29,17],[41,22,29,20],[41,23,29,21],[41,26,29,24],[41,28,29,26],[42,8,30,6],[42,15,30,13],[42,16,30,14],[42,19,30,17],[42,22,30,20,"offset"],[42,28,30,26],[42,32,30,30],[42,33,30,31],[42,34,30,32],[43,6,31,4],[44,6,32,4],[44,13,32,11,"factValue"],[44,22,32,20],[45,4,33,2],[45,5,33,3],[46,4,34,2],[46,10,34,8,"calcMaxLngByOffset"],[46,28,34,26],[46,31,34,29,"calcMaxLngByOffset"],[46,32,34,30,"lng"],[46,35,34,33],[46,37,34,35,"offset"],[46,43,34,41],[46,48,34,46],[47,6,35,4],[47,12,35,10,"factValue"],[47,21,35,19],[47,24,35,22,"lng"],[47,27,35,25],[47,30,35,28,"offset"],[47,36,35,34],[48,6,36,4],[48,10,36,8],[48,13,36,11],[48,16,36,14,"factValue"],[48,25,36,23],[48,27,36,25],[49,8,37,6],[49,15,37,13],[49,16,37,14],[49,19,37,17],[49,22,37,20,"offset"],[49,28,37,26],[49,32,37,30],[49,33,37,31],[49,34,37,32],[50,6,38,4],[51,6,39,4],[51,13,39,11,"factValue"],[51,22,39,20],[52,4,40,2],[52,5,40,3],[53,4,41,2],[53,10,41,8,"latOffset"],[53,19,41,17],[53,22,41,20,"region"],[53,28,41,26],[53,29,41,27,"latitudeDelta"],[53,42,41,40],[53,45,41,43],[53,46,41,44],[53,49,41,47,"scale"],[53,54,41,52],[54,4,42,2],[54,10,42,8,"lngD"],[54,14,42,12],[54,17,42,15,"region"],[54,23,42,21],[54,24,42,22,"longitudeDelta"],[54,38,42,36],[54,41,42,39],[54,42,42,40],[54,45,42,43],[54,48,42,46],[54,51,42,49],[54,54,42,52,"region"],[54,60,42,58],[54,61,42,59,"longitudeDelta"],[54,75,42,73],[54,78,42,76,"region"],[54,84,42,82],[54,85,42,83,"longitudeDelta"],[54,99,42,97],[55,4,43,2],[55,10,43,8,"lngOffset"],[55,19,43,17],[55,22,43,20,"lngD"],[55,26,43,24],[55,29,43,27],[55,30,43,28],[55,33,43,31,"scale"],[55,38,43,36],[57,4,45,2],[58,4,46,2],[59,4,47,2],[60,4,48,2],[62,4,50,2],[62,11,50,9],[62,12,50,10,"calcMinLngByOffset"],[62,30,50,28],[62,31,50,29,"region"],[62,37,50,35],[62,38,50,36,"longitude"],[62,47,50,45],[62,49,50,47,"lngOffset"],[62,58,50,56],[62,59,50,57],[63,4,51,2],[64,4,52,2,"calcMinLatByOffset"],[64,22,52,20],[64,23,52,21,"region"],[64,29,52,27],[64,30,52,28,"latitude"],[64,38,52,36],[64,40,52,38,"latOffset"],[64,49,52,47],[64,50,52,48],[65,4,53,2],[66,4,54,2,"calcMaxLngByOffset"],[66,22,54,20],[66,23,54,21,"region"],[66,29,54,27],[66,30,54,28,"longitude"],[66,39,54,37],[66,41,54,39,"lngOffset"],[66,50,54,48],[66,51,54,49],[67,4,55,2],[68,4,56,2,"calcMaxLatByOffset"],[68,22,56,20],[68,23,56,21,"region"],[68,29,56,27],[68,30,56,28,"latitude"],[68,38,56,36],[68,40,56,38,"latOffset"],[68,49,56,47],[68,50,56,48],[68,51,56,49],[69,4,56,49],[69,5,57,3],[70,2,58,0],[70,3,58,1],[71,0,58,2],[71,3]],"functionMap":{"names":["<global>","getBoundByRegion","calcMinLatByOffset","calcMaxLatByOffset","calcMinLngByOffset","calcMaxLngByOffset"],"mappings":"AAA;gCCK;6BCO;GDM;6BEC;GFM;6BGC;GHM;6BIC;GJM;CDkB"},"hasCjsExports":false},"type":"js/module"}]}