{"dependencies":[{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":82,"index":82}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"],"imports":1}},{"name":"use-sync-external-store/shim/index.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":83},"end":{"line":2,"column":77,"index":160}}],"key":"Iqy9mJIlTrg6+CjRiIepLJBxASw=","exportNames":["*"],"imports":1}},{"name":"swr/_internal","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":161},"end":{"line":3,"column":313,"index":474}}],"key":"Ka5IJ+zNSozXuDxg1IH+7eOwSfI=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"mutate\", {\n    enumerable: true,\n    get: function () {\n      return _swr_internal.mutate;\n    }\n  });\n  Object.defineProperty(exports, \"preload\", {\n    enumerable: true,\n    get: function () {\n      return _swr_internal.preload;\n    }\n  });\n  Object.defineProperty(exports, \"useSWRConfig\", {\n    enumerable: true,\n    get: function () {\n      return _swr_internal.useSWRConfig;\n    }\n  });\n  Object.defineProperty(exports, \"SWRConfig\", {\n    enumerable: true,\n    get: function () {\n      return SWRConfig;\n    }\n  });\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return useSWR;\n    }\n  });\n  Object.defineProperty(exports, \"unstable_serialize\", {\n    enumerable: true,\n    get: function () {\n      return unstable_serialize;\n    }\n  });\n  var _react = require(_dependencyMap[0], \"react\");\n  var ReactExports = _interopDefault(_react);\n  var _useSyncExternalStoreShimIndexJs = require(_dependencyMap[1], \"use-sync-external-store/shim/index.js\");\n  var _swr_internal = require(_dependencyMap[2], \"swr/_internal\");\n  const unstable_serialize = key => (0, _swr_internal.serialize)(key)[0];\n\n  /// <reference types=\"react/experimental\" />\n  const use = ReactExports.default.use || (promise => {\n    if (promise.status === 'pending') {\n      throw promise;\n    } else if (promise.status === 'fulfilled') {\n      return promise.value;\n    } else if (promise.status === 'rejected') {\n      throw promise.reason;\n    } else {\n      promise.status = 'pending';\n      promise.then(v => {\n        promise.status = 'fulfilled';\n        promise.value = v;\n      }, e => {\n        promise.status = 'rejected';\n        promise.reason = e;\n      });\n      throw promise;\n    }\n  });\n  const WITH_DEDUPE = {\n    dedupe: true\n  };\n  const useSWRHandler = (_key, fetcher, config) => {\n    const {\n      cache,\n      compare,\n      suspense,\n      fallbackData,\n      revalidateOnMount,\n      revalidateIfStale,\n      refreshInterval,\n      refreshWhenHidden,\n      refreshWhenOffline,\n      keepPreviousData\n    } = config;\n    const [EVENT_REVALIDATORS, MUTATION, FETCH, PRELOAD] = _swr_internal.SWRGlobalState.get(cache);\n    // `key` is the identifier of the SWR internal state,\n    // `fnArg` is the argument/arguments parsed from the key, which will be passed\n    // to the fetcher.\n    // All of them are derived from `_key`.\n    const [key, fnArg] = (0, _swr_internal.serialize)(_key);\n    // If it's the initial render of this hook.\n    const initialMountedRef = (0, _react.useRef)(false);\n    // If the hook is unmounted already. This will be used to prevent some effects\n    // to be called after unmounting.\n    const unmountedRef = (0, _react.useRef)(false);\n    // Refs to keep the key and config.\n    const keyRef = (0, _react.useRef)(key);\n    const fetcherRef = (0, _react.useRef)(fetcher);\n    const configRef = (0, _react.useRef)(config);\n    const getConfig = () => configRef.current;\n    const isActive = () => getConfig().isVisible() && getConfig().isOnline();\n    const [getCache, setCache, subscribeCache, getInitialCache] = (0, _swr_internal.createCacheHelper)(cache, key);\n    const stateDependencies = (0, _react.useRef)({}).current;\n    const fallback = (0, _swr_internal.isUndefined)(fallbackData) ? config.fallback[key] : fallbackData;\n    const isEqual = (prev, current) => {\n      for (const _ in stateDependencies) {\n        const t = _;\n        if (t === 'data') {\n          if (!compare(prev[t], current[t])) {\n            if (!(0, _swr_internal.isUndefined)(prev[t])) {\n              return false;\n            }\n            if (!compare(returnedData, current[t])) {\n              return false;\n            }\n          }\n        } else {\n          if (current[t] !== prev[t]) {\n            return false;\n          }\n        }\n      }\n      return true;\n    };\n    const getSnapshot = (0, _react.useMemo)(() => {\n      const shouldStartRequest = (() => {\n        if (!key) return false;\n        if (!fetcher) return false;\n        // If `revalidateOnMount` is set, we take the value directly.\n        if (!(0, _swr_internal.isUndefined)(revalidateOnMount)) return revalidateOnMount;\n        // If it's paused, we skip revalidation.\n        if (getConfig().isPaused()) return false;\n        if (suspense) return false;\n        if (!(0, _swr_internal.isUndefined)(revalidateIfStale)) return revalidateIfStale;\n        return true;\n      })();\n      // Get the cache and merge it with expected states.\n      const getSelectedCache = state => {\n        // We only select the needed fields from the state.\n        const snapshot = (0, _swr_internal.mergeObjects)(state);\n        delete snapshot._k;\n        if (!shouldStartRequest) {\n          return snapshot;\n        }\n        return {\n          isValidating: true,\n          isLoading: true,\n          ...snapshot\n        };\n      };\n      const cachedData = getCache();\n      const initialData = getInitialCache();\n      const clientSnapshot = getSelectedCache(cachedData);\n      const serverSnapshot = cachedData === initialData ? clientSnapshot : getSelectedCache(initialData);\n      // To make sure that we are returning the same object reference to avoid\n      // unnecessary re-renders, we keep the previous snapshot and use deep\n      // comparison to check if we need to return a new one.\n      let memorizedSnapshot = clientSnapshot;\n      return [() => {\n        const newSnapshot = getSelectedCache(getCache());\n        const compareResult = isEqual(newSnapshot, memorizedSnapshot);\n        if (compareResult) {\n          // Mentally, we should always return the `memorizedSnapshot` here\n          // as there's no change between the new and old snapshots.\n          // However, since the `isEqual` function only compares selected fields,\n          // the values of the unselected fields might be changed. That's\n          // simply because we didn't track them.\n          // To support the case in https://github.com/vercel/swr/pull/2576,\n          // we need to update these fields in the `memorizedSnapshot` too\n          // with direct mutations to ensure the snapshot is always up-to-date\n          // even for the unselected fields, but only trigger re-renders when\n          // the selected fields are changed.\n          memorizedSnapshot.data = newSnapshot.data;\n          memorizedSnapshot.isLoading = newSnapshot.isLoading;\n          memorizedSnapshot.isValidating = newSnapshot.isValidating;\n          memorizedSnapshot.error = newSnapshot.error;\n          return memorizedSnapshot;\n        } else {\n          memorizedSnapshot = newSnapshot;\n          return newSnapshot;\n        }\n      }, () => serverSnapshot];\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [cache, key]);\n    // Get the current state that SWR should return.\n    const cached = (0, _useSyncExternalStoreShimIndexJs.useSyncExternalStore)((0, _react.useCallback)(callback => subscribeCache(key, (current, prev) => {\n      if (!isEqual(prev, current)) callback();\n    }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [cache, key]), getSnapshot[0], getSnapshot[1]);\n    const isInitialMount = !initialMountedRef.current;\n    const hasRevalidator = EVENT_REVALIDATORS[key] && EVENT_REVALIDATORS[key].length > 0;\n    const cachedData = cached.data;\n    const data = (0, _swr_internal.isUndefined)(cachedData) ? fallback : cachedData;\n    const error = cached.error;\n    // Use a ref to store previously returned data. Use the initial data as its initial value.\n    const laggyDataRef = (0, _react.useRef)(data);\n    const returnedData = keepPreviousData ? (0, _swr_internal.isUndefined)(cachedData) ? laggyDataRef.current : cachedData : data;\n    // - Suspense mode and there's stale data for the initial render.\n    // - Not suspense mode and there is no fallback data and `revalidateIfStale` is enabled.\n    // - `revalidateIfStale` is enabled but `data` is not defined.\n    const shouldDoInitialRevalidation = (() => {\n      // if a key already has revalidators and also has error, we should not trigger revalidation\n      if (hasRevalidator && !(0, _swr_internal.isUndefined)(error)) return false;\n      // If `revalidateOnMount` is set, we take the value directly.\n      if (isInitialMount && !(0, _swr_internal.isUndefined)(revalidateOnMount)) return revalidateOnMount;\n      // If it's paused, we skip revalidation.\n      if (getConfig().isPaused()) return false;\n      // Under suspense mode, it will always fetch on render if there is no\n      // stale data so no need to revalidate immediately mount it again.\n      // If data exists, only revalidate if `revalidateIfStale` is true.\n      if (suspense) return (0, _swr_internal.isUndefined)(data) ? false : revalidateIfStale;\n      // If there is no stale data, we need to revalidate when mount;\n      // If `revalidateIfStale` is set to true, we will always revalidate.\n      return (0, _swr_internal.isUndefined)(data) || revalidateIfStale;\n    })();\n    // Resolve the default validating state:\n    // If it's able to validate, and it should revalidate when mount, this will be true.\n    const defaultValidatingState = !!(key && fetcher && isInitialMount && shouldDoInitialRevalidation);\n    const isValidating = (0, _swr_internal.isUndefined)(cached.isValidating) ? defaultValidatingState : cached.isValidating;\n    const isLoading = (0, _swr_internal.isUndefined)(cached.isLoading) ? defaultValidatingState : cached.isLoading;\n    // The revalidation function is a carefully crafted wrapper of the original\n    // `fetcher`, to correctly handle the many edge cases.\n    const revalidate = (0, _react.useCallback)(async revalidateOpts => {\n      const currentFetcher = fetcherRef.current;\n      if (!key || !currentFetcher || unmountedRef.current || getConfig().isPaused()) {\n        return false;\n      }\n      let newData;\n      let startAt;\n      let loading = true;\n      const opts = revalidateOpts || {};\n      // If there is no ongoing concurrent request, or `dedupe` is not set, a\n      // new request should be initiated.\n      const shouldStartNewRequest = !FETCH[key] || !opts.dedupe;\n      /*\n       For React 17\n       Do unmount check for calls:\n       If key has changed during the revalidation, or the component has been\n       unmounted, old dispatch and old event callbacks should not take any\n       effect\n       For React 18\n      only check if key has changed\n      https://github.com/reactwg/react-18/discussions/82\n      */\n      const callbackSafeguard = () => {\n        if (_swr_internal.IS_REACT_LEGACY) {\n          return !unmountedRef.current && key === keyRef.current && initialMountedRef.current;\n        }\n        return key === keyRef.current;\n      };\n      // The final state object when the request finishes.\n      const finalState = {\n        isValidating: false,\n        isLoading: false\n      };\n      const finishRequestAndUpdateState = () => {\n        setCache(finalState);\n      };\n      const cleanupState = () => {\n        // Check if it's still the same request before deleting it.\n        const requestInfo = FETCH[key];\n        if (requestInfo && requestInfo[1] === startAt) {\n          delete FETCH[key];\n        }\n      };\n      // Start fetching. Change the `isValidating` state, update the cache.\n      const initialState = {\n        isValidating: true\n      };\n      // It is in the `isLoading` state, if and only if there is no cached data.\n      // This bypasses fallback data and laggy data.\n      if ((0, _swr_internal.isUndefined)(getCache().data)) {\n        initialState.isLoading = true;\n      }\n      try {\n        if (shouldStartNewRequest) {\n          setCache(initialState);\n          // If no cache is being rendered currently (it shows a blank page),\n          // we trigger the loading slow event.\n          if (config.loadingTimeout && (0, _swr_internal.isUndefined)(getCache().data)) {\n            setTimeout(() => {\n              if (loading && callbackSafeguard()) {\n                getConfig().onLoadingSlow(key, config);\n              }\n            }, config.loadingTimeout);\n          }\n          // Start the request and save the timestamp.\n          // Key must be truthy if entering here.\n          FETCH[key] = [currentFetcher(fnArg), (0, _swr_internal.getTimestamp)()];\n        }\n        [newData, startAt] = FETCH[key];\n        newData = await newData;\n        if (shouldStartNewRequest) {\n          // If the request isn't interrupted, clean it up after the\n          // deduplication interval.\n          setTimeout(cleanupState, config.dedupingInterval);\n        }\n        // If there're other ongoing request(s), started after the current one,\n        // we need to ignore the current one to avoid possible race conditions:\n        //   req1------------------>res1        (current one)\n        //        req2---------------->res2\n        // the request that fired later will always be kept.\n        // The timestamp maybe be `undefined` or a number\n        if (!FETCH[key] || FETCH[key][1] !== startAt) {\n          if (shouldStartNewRequest) {\n            if (callbackSafeguard()) {\n              getConfig().onDiscarded(key);\n            }\n          }\n          return false;\n        }\n        // Clear error.\n        finalState.error = _swr_internal.UNDEFINED;\n        // If there're other mutations(s), that overlapped with the current revalidation:\n        // case 1:\n        //   req------------------>res\n        //       mutate------>end\n        // case 2:\n        //         req------------>res\n        //   mutate------>end\n        // case 3:\n        //   req------------------>res\n        //       mutate-------...---------->\n        // we have to ignore the revalidation result (res) because it's no longer fresh.\n        // meanwhile, a new revalidation should be triggered when the mutation ends.\n        const mutationInfo = MUTATION[key];\n        if (!(0, _swr_internal.isUndefined)(mutationInfo) && (\n        // case 1\n        startAt <= mutationInfo[0] ||\n        // case 2\n        startAt <= mutationInfo[1] ||\n        // case 3\n        mutationInfo[1] === 0)) {\n          finishRequestAndUpdateState();\n          if (shouldStartNewRequest) {\n            if (callbackSafeguard()) {\n              getConfig().onDiscarded(key);\n            }\n          }\n          return false;\n        }\n        // Deep compare with the latest state to avoid extra re-renders.\n        // For local state, compare and assign.\n        const cacheData = getCache().data;\n        // Since the compare fn could be custom fn\n        // cacheData might be different from newData even when compare fn returns True\n        finalState.data = compare(cacheData, newData) ? cacheData : newData;\n        // Trigger the successful callback if it's the original request.\n        if (shouldStartNewRequest) {\n          if (callbackSafeguard()) {\n            getConfig().onSuccess(newData, key, config);\n          }\n        }\n      } catch (err) {\n        cleanupState();\n        const currentConfig = getConfig();\n        const {\n          shouldRetryOnError\n        } = currentConfig;\n        // Not paused, we continue handling the error. Otherwise, discard it.\n        if (!currentConfig.isPaused()) {\n          // Get a new error, don't use deep comparison for errors.\n          finalState.error = err;\n          // Error event and retry logic. Only for the actual request, not\n          // deduped ones.\n          if (shouldStartNewRequest && callbackSafeguard()) {\n            currentConfig.onError(err, key, currentConfig);\n            if (shouldRetryOnError === true || (0, _swr_internal.isFunction)(shouldRetryOnError) && shouldRetryOnError(err)) {\n              if (isActive()) {\n                // If it's inactive, stop. It will auto-revalidate when\n                // refocusing or reconnecting.\n                // When retrying, deduplication is always enabled.\n                currentConfig.onErrorRetry(err, key, currentConfig, _opts => {\n                  const revalidators = EVENT_REVALIDATORS[key];\n                  if (revalidators && revalidators[0]) {\n                    revalidators[0](_swr_internal.revalidateEvents.ERROR_REVALIDATE_EVENT, _opts);\n                  }\n                }, {\n                  retryCount: (opts.retryCount || 0) + 1,\n                  dedupe: true\n                });\n              }\n            }\n          }\n        }\n      }\n      // Mark loading as stopped.\n      loading = false;\n      // Update the current hook's state.\n      finishRequestAndUpdateState();\n      return true;\n    },\n    // `setState` is immutable, and `eventsCallback`, `fnArg`, and\n    // `keyValidating` are depending on `key`, so we can exclude them from\n    // the deps array.\n    //\n    // FIXME:\n    // `fn` and `config` might be changed during the lifecycle,\n    // but they might be changed every render like this.\n    // `useSWR('key', () => fetch('/api/'), { suspense: true })`\n    // So we omit the values from the deps array\n    // even though it might cause unexpected behaviors.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [key, cache]);\n    // Similar to the global mutate but bound to the current cache and key.\n    // `cache` isn't allowed to change during the lifecycle.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const boundMutate = (0, _react.useCallback)(\n    // Use callback to make sure `keyRef.current` returns latest result every time\n    (...args) => {\n      return (0, _swr_internal.internalMutate)(cache, keyRef.current, ...args);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []);\n    // The logic for updating refs.\n    (0, _swr_internal.useIsomorphicLayoutEffect)(() => {\n      fetcherRef.current = fetcher;\n      configRef.current = config;\n      // Handle laggy data updates. If there's cached data of the current key,\n      // it'll be the correct reference.\n      if (!(0, _swr_internal.isUndefined)(cachedData)) {\n        laggyDataRef.current = cachedData;\n      }\n    });\n    // After mounted or key changed.\n    (0, _swr_internal.useIsomorphicLayoutEffect)(() => {\n      if (!key) return;\n      const softRevalidate = revalidate.bind(_swr_internal.UNDEFINED, WITH_DEDUPE);\n      // Expose revalidators to global event listeners. So we can trigger\n      // revalidation from the outside.\n      let nextFocusRevalidatedAt = 0;\n      const onRevalidate = (type, opts = {}) => {\n        if (type == _swr_internal.revalidateEvents.FOCUS_EVENT) {\n          const now = Date.now();\n          if (getConfig().revalidateOnFocus && now > nextFocusRevalidatedAt && isActive()) {\n            nextFocusRevalidatedAt = now + getConfig().focusThrottleInterval;\n            softRevalidate();\n          }\n        } else if (type == _swr_internal.revalidateEvents.RECONNECT_EVENT) {\n          if (getConfig().revalidateOnReconnect && isActive()) {\n            softRevalidate();\n          }\n        } else if (type == _swr_internal.revalidateEvents.MUTATE_EVENT) {\n          return revalidate();\n        } else if (type == _swr_internal.revalidateEvents.ERROR_REVALIDATE_EVENT) {\n          return revalidate(opts);\n        }\n        return;\n      };\n      const unsubEvents = (0, _swr_internal.subscribeCallback)(key, EVENT_REVALIDATORS, onRevalidate);\n      // Mark the component as mounted and update corresponding refs.\n      unmountedRef.current = false;\n      keyRef.current = key;\n      initialMountedRef.current = true;\n      // Keep the original key in the cache.\n      setCache({\n        _k: fnArg\n      });\n      // Trigger a revalidation\n      if (shouldDoInitialRevalidation) {\n        if ((0, _swr_internal.isUndefined)(data) || _swr_internal.IS_SERVER) {\n          // Revalidate immediately.\n          softRevalidate();\n        } else {\n          // Delay the revalidate if we have data to return so we won't block\n          // rendering.\n          (0, _swr_internal.rAF)(softRevalidate);\n        }\n      }\n      return () => {\n        // Mark it as unmounted.\n        unmountedRef.current = true;\n        unsubEvents();\n      };\n    }, [key]);\n    // Polling\n    (0, _swr_internal.useIsomorphicLayoutEffect)(() => {\n      let timer;\n      function next() {\n        // Use the passed interval\n        // ...or invoke the function with the updated data to get the interval\n        const interval = (0, _swr_internal.isFunction)(refreshInterval) ? refreshInterval(getCache().data) : refreshInterval;\n        // We only start the next interval if `refreshInterval` is not 0, and:\n        // - `force` is true, which is the start of polling\n        // - or `timer` is not 0, which means the effect wasn't canceled\n        if (interval && timer !== -1) {\n          timer = setTimeout(execute, interval);\n        }\n      }\n      function execute() {\n        // Check if it's OK to execute:\n        // Only revalidate when the page is visible, online, and not errored.\n        if (!getCache().error && (refreshWhenHidden || getConfig().isVisible()) && (refreshWhenOffline || getConfig().isOnline())) {\n          revalidate(WITH_DEDUPE).then(next);\n        } else {\n          // Schedule the next interval to check again.\n          next();\n        }\n      }\n      next();\n      return () => {\n        if (timer) {\n          clearTimeout(timer);\n          timer = -1;\n        }\n      };\n    }, [refreshInterval, refreshWhenHidden, refreshWhenOffline, key]);\n    // Display debug info in React DevTools.\n    (0, _react.useDebugValue)(returnedData);\n    // In Suspense mode, we can't return the empty `data` state.\n    // If there is an `error`, the `error` needs to be thrown to the error boundary.\n    // If there is no `error`, the `revalidation` promise needs to be thrown to\n    // the suspense boundary.\n    if (suspense && (0, _swr_internal.isUndefined)(data) && key) {\n      // SWR should throw when trying to use Suspense on the server with React 18,\n      // without providing any initial data. See:\n      // https://github.com/vercel/swr/issues/1832\n      if (!_swr_internal.IS_REACT_LEGACY && _swr_internal.IS_SERVER) {\n        throw new Error('Fallback data is required when using suspense in SSR.');\n      }\n      // Always update fetcher and config refs even with the Suspense mode.\n      fetcherRef.current = fetcher;\n      configRef.current = config;\n      unmountedRef.current = false;\n      const req = PRELOAD[key];\n      if (!(0, _swr_internal.isUndefined)(req)) {\n        const promise = boundMutate(req);\n        use(promise);\n      }\n      if ((0, _swr_internal.isUndefined)(error)) {\n        const promise = revalidate(WITH_DEDUPE);\n        if (!(0, _swr_internal.isUndefined)(returnedData)) {\n          promise.status = 'fulfilled';\n          promise.value = true;\n        }\n        use(promise);\n      } else {\n        throw error;\n      }\n    }\n    return {\n      mutate: boundMutate,\n      get data() {\n        stateDependencies.data = true;\n        return returnedData;\n      },\n      get error() {\n        stateDependencies.error = true;\n        return error;\n      },\n      get isValidating() {\n        stateDependencies.isValidating = true;\n        return isValidating;\n      },\n      get isLoading() {\n        stateDependencies.isLoading = true;\n        return isLoading;\n      }\n    };\n  };\n  const SWRConfig = _swr_internal.OBJECT.defineProperty(_swr_internal.SWRConfig, 'defaultValue', {\n    value: _swr_internal.defaultConfig\n  });\n  /**\n   * A hook to fetch data.\n   *\n   * @link https://swr.vercel.app\n   * @example\n   * ```jsx\n   * import useSWR from 'swr'\n   * function Profile() {\n   *   const { data, error } = useSWR('/api/user', fetcher)\n   *   if (error) return <div>failed to load</div>\n   *   if (!data) return <div>loading...</div>\n   *   return <div>hello {data.name}!</div>\n   * }\n   * ```\n   */\n  const useSWR = (0, _swr_internal.withArgs)(useSWRHandler);\n\n  // useSWR\n});","lineCount":588,"map":[[12,2,4,0,"Object"],[12,8,4,0],[12,9,4,0,"defineProperty"],[12,23,4,0],[12,24,4,0,"exports"],[12,31,4,0],[13,4,4,0,"enumerable"],[13,14,4,0],[14,4,4,0,"get"],[14,7,4,0],[14,18,4,0,"get"],[14,19,4,0],[15,6,4,0],[15,13,4,0,"_swr_internal"],[15,26,4,0],[15,27,4,0,"mutate"],[15,33,4,0],[16,4,4,0],[17,2,4,0],[18,2,4,0,"Object"],[18,8,4,0],[18,9,4,0,"defineProperty"],[18,23,4,0],[18,24,4,0,"exports"],[18,31,4,0],[19,4,4,0,"enumerable"],[19,14,4,0],[20,4,4,0,"get"],[20,7,4,0],[20,18,4,0,"get"],[20,19,4,0],[21,6,4,0],[21,13,4,0,"_swr_internal"],[21,26,4,0],[21,27,4,0,"preload"],[21,34,4,0],[22,4,4,0],[23,2,4,0],[24,2,4,0,"Object"],[24,8,4,0],[24,9,4,0,"defineProperty"],[24,23,4,0],[24,24,4,0,"exports"],[24,31,4,0],[25,4,4,0,"enumerable"],[25,14,4,0],[26,4,4,0,"get"],[26,7,4,0],[26,18,4,0,"get"],[26,19,4,0],[27,6,4,0],[27,13,4,0,"_swr_internal"],[27,26,4,0],[27,27,4,0,"useSWRConfig"],[27,39,4,0],[28,4,4,0],[29,2,4,0],[30,2,544,0,"Object"],[30,8,544,0],[30,9,544,0,"defineProperty"],[30,23,544,0],[30,24,544,0,"exports"],[30,31,544,0],[31,4,544,0,"enumerable"],[31,14,544,0],[32,4,544,0,"get"],[32,7,544,0],[32,18,544,0,"get"],[32,19,544,0],[33,6,544,0],[33,13,544,9,"SWRConfig"],[33,22,544,18],[34,4,544,18],[35,2,544,18],[36,2,544,0,"Object"],[36,8,544,0],[36,9,544,0,"defineProperty"],[36,23,544,0],[36,24,544,0,"exports"],[36,31,544,0],[37,4,544,0,"enumerable"],[37,14,544,0],[38,4,544,0,"get"],[38,7,544,0],[38,18,544,0,"get"],[38,19,544,0],[39,6,544,0],[39,13,544,20,"useSWR"],[39,19,544,26],[40,4,544,26],[41,2,544,26],[42,2,544,0,"Object"],[42,8,544,0],[42,9,544,0,"defineProperty"],[42,23,544,0],[42,24,544,0,"exports"],[42,31,544,0],[43,4,544,0,"enumerable"],[43,14,544,0],[44,4,544,0,"get"],[44,7,544,0],[44,18,544,0,"get"],[44,19,544,0],[45,6,544,0],[45,13,544,39,"unstable_serialize"],[45,31,544,57],[46,4,544,57],[47,2,544,57],[48,2,1,0],[48,6,1,0,"_react"],[48,12,1,0],[48,15,1,0,"require"],[48,22,1,0],[48,23,1,0,"_dependencyMap"],[48,37,1,0],[49,2,1,0],[49,6,1,0,"ReactExports"],[49,18,1,0],[49,21,1,0,"_interopDefault"],[49,36,1,0],[49,37,1,0,"_react"],[49,43,1,0],[50,2,2,0],[50,6,2,0,"_useSyncExternalStoreShimIndexJs"],[50,38,2,0],[50,41,2,0,"require"],[50,48,2,0],[50,49,2,0,"_dependencyMap"],[50,63,2,0],[51,2,3,0],[51,6,3,0,"_swr_internal"],[51,19,3,0],[51,22,3,0,"require"],[51,29,3,0],[51,30,3,0,"_dependencyMap"],[51,44,3,0],[52,2,6,0],[52,8,6,6,"unstable_serialize"],[52,26,6,24],[52,29,6,28,"key"],[52,32,6,31],[52,36,6,34],[52,40,6,34,"serialize"],[52,53,6,43],[52,54,6,43,"serialize"],[52,63,6,43],[52,65,6,44,"key"],[52,68,6,47],[52,69,6,48],[52,70,6,49],[52,71,6,50],[52,72,6,51],[54,2,8,0],[55,2,9,0],[55,8,9,6,"use"],[55,11,9,9],[55,14,9,12,"ReactExports"],[55,26,9,24],[55,27,9,24,"default"],[55,34,9,24],[55,35,9,25,"use"],[55,38,9,28],[55,43,9,34,"promise"],[55,50,9,41],[55,54,9,44],[56,4,10,4],[56,8,10,8,"promise"],[56,15,10,15],[56,16,10,16,"status"],[56,22,10,22],[56,27,10,27],[56,36,10,36],[56,38,10,38],[57,6,11,8],[57,12,11,14,"promise"],[57,19,11,21],[58,4,12,4],[58,5,12,5],[58,11,12,11],[58,15,12,15,"promise"],[58,22,12,22],[58,23,12,23,"status"],[58,29,12,29],[58,34,12,34],[58,45,12,45],[58,47,12,47],[59,6,13,8],[59,13,13,15,"promise"],[59,20,13,22],[59,21,13,23,"value"],[59,26,13,28],[60,4,14,4],[60,5,14,5],[60,11,14,11],[60,15,14,15,"promise"],[60,22,14,22],[60,23,14,23,"status"],[60,29,14,29],[60,34,14,34],[60,44,14,44],[60,46,14,46],[61,6,15,8],[61,12,15,14,"promise"],[61,19,15,21],[61,20,15,22,"reason"],[61,26,15,28],[62,4,16,4],[62,5,16,5],[62,11,16,11],[63,6,17,8,"promise"],[63,13,17,15],[63,14,17,16,"status"],[63,20,17,22],[63,23,17,25],[63,32,17,34],[64,6,18,8,"promise"],[64,13,18,15],[64,14,18,16,"then"],[64,18,18,20],[64,19,18,22,"v"],[64,20,18,23],[64,24,18,26],[65,8,19,12,"promise"],[65,15,19,19],[65,16,19,20,"status"],[65,22,19,26],[65,25,19,29],[65,36,19,40],[66,8,20,12,"promise"],[66,15,20,19],[66,16,20,20,"value"],[66,21,20,25],[66,24,20,28,"v"],[66,25,20,29],[67,6,21,8],[67,7,21,9],[67,9,21,12,"e"],[67,10,21,13],[67,14,21,16],[68,8,22,12,"promise"],[68,15,22,19],[68,16,22,20,"status"],[68,22,22,26],[68,25,22,29],[68,35,22,39],[69,8,23,12,"promise"],[69,15,23,19],[69,16,23,20,"reason"],[69,22,23,26],[69,25,23,29,"e"],[69,26,23,30],[70,6,24,8],[70,7,24,9],[70,8,24,10],[71,6,25,8],[71,12,25,14,"promise"],[71,19,25,21],[72,4,26,4],[73,2,27,0],[73,3,27,1],[73,4,27,2],[74,2,28,0],[74,8,28,6,"WITH_DEDUPE"],[74,19,28,17],[74,22,28,20],[75,4,29,4,"dedupe"],[75,10,29,10],[75,12,29,12],[76,2,30,0],[76,3,30,1],[77,2,31,0],[77,8,31,6,"useSWRHandler"],[77,21,31,19],[77,24,31,22,"useSWRHandler"],[77,25,31,23,"_key"],[77,29,31,27],[77,31,31,29,"fetcher"],[77,38,31,36],[77,40,31,38,"config"],[77,46,31,44],[77,51,31,47],[78,4,32,4],[78,10,32,10],[79,6,32,12,"cache"],[79,11,32,17],[80,6,32,20,"compare"],[80,13,32,27],[81,6,32,30,"suspense"],[81,14,32,38],[82,6,32,41,"fallbackData"],[82,18,32,53],[83,6,32,56,"revalidateOnMount"],[83,23,32,73],[84,6,32,76,"revalidateIfStale"],[84,23,32,93],[85,6,32,96,"refreshInterval"],[85,21,32,111],[86,6,32,114,"refreshWhenHidden"],[86,23,32,131],[87,6,32,134,"refreshWhenOffline"],[87,24,32,152],[88,6,32,155,"keepPreviousData"],[89,4,32,173],[89,5,32,174],[89,8,32,177,"config"],[89,14,32,183],[90,4,33,4],[90,10,33,10],[90,11,33,11,"EVENT_REVALIDATORS"],[90,29,33,29],[90,31,33,31,"MUTATION"],[90,39,33,39],[90,41,33,41,"FETCH"],[90,46,33,46],[90,48,33,48,"PRELOAD"],[90,55,33,55],[90,56,33,56],[90,59,33,59,"SWRGlobalState"],[90,72,33,73],[90,73,33,73,"SWRGlobalState"],[90,87,33,73],[90,88,33,74,"get"],[90,91,33,77],[90,92,33,78,"cache"],[90,97,33,83],[90,98,33,84],[91,4,34,4],[92,4,35,4],[93,4,36,4],[94,4,37,4],[95,4,38,4],[95,10,38,10],[95,11,38,11,"key"],[95,14,38,14],[95,16,38,16,"fnArg"],[95,21,38,21],[95,22,38,22],[95,25,38,25],[95,29,38,25,"serialize"],[95,42,38,34],[95,43,38,34,"serialize"],[95,52,38,34],[95,54,38,35,"_key"],[95,58,38,39],[95,59,38,40],[96,4,39,4],[97,4,40,4],[97,10,40,10,"initialMountedRef"],[97,27,40,27],[97,30,40,30],[97,34,40,30,"useRef"],[97,40,40,36],[97,41,40,36,"useRef"],[97,47,40,36],[97,49,40,37],[97,54,40,42],[97,55,40,43],[98,4,41,4],[99,4,42,4],[100,4,43,4],[100,10,43,10,"unmountedRef"],[100,22,43,22],[100,25,43,25],[100,29,43,25,"useRef"],[100,35,43,31],[100,36,43,31,"useRef"],[100,42,43,31],[100,44,43,32],[100,49,43,37],[100,50,43,38],[101,4,44,4],[102,4,45,4],[102,10,45,10,"keyRef"],[102,16,45,16],[102,19,45,19],[102,23,45,19,"useRef"],[102,29,45,25],[102,30,45,25,"useRef"],[102,36,45,25],[102,38,45,26,"key"],[102,41,45,29],[102,42,45,30],[103,4,46,4],[103,10,46,10,"fetcherRef"],[103,20,46,20],[103,23,46,23],[103,27,46,23,"useRef"],[103,33,46,29],[103,34,46,29,"useRef"],[103,40,46,29],[103,42,46,30,"fetcher"],[103,49,46,37],[103,50,46,38],[104,4,47,4],[104,10,47,10,"configRef"],[104,19,47,19],[104,22,47,22],[104,26,47,22,"useRef"],[104,32,47,28],[104,33,47,28,"useRef"],[104,39,47,28],[104,41,47,29,"config"],[104,47,47,35],[104,48,47,36],[105,4,48,4],[105,10,48,10,"getConfig"],[105,19,48,19],[105,22,48,22,"getConfig"],[105,23,48,22],[105,28,48,26,"configRef"],[105,37,48,35],[105,38,48,36,"current"],[105,45,48,43],[106,4,49,4],[106,10,49,10,"isActive"],[106,18,49,18],[106,21,49,21,"isActive"],[106,22,49,21],[106,27,49,25,"getConfig"],[106,36,49,34],[106,37,49,35],[106,38,49,36],[106,39,49,37,"isVisible"],[106,48,49,46],[106,49,49,47],[106,50,49,48],[106,54,49,52,"getConfig"],[106,63,49,61],[106,64,49,62],[106,65,49,63],[106,66,49,64,"isOnline"],[106,74,49,72],[106,75,49,73],[106,76,49,74],[107,4,50,4],[107,10,50,10],[107,11,50,11,"getCache"],[107,19,50,19],[107,21,50,21,"setCache"],[107,29,50,29],[107,31,50,31,"subscribeCache"],[107,45,50,45],[107,47,50,47,"getInitialCache"],[107,62,50,62],[107,63,50,63],[107,66,50,66],[107,70,50,66,"createCacheHelper"],[107,83,50,83],[107,84,50,83,"createCacheHelper"],[107,101,50,83],[107,103,50,84,"cache"],[107,108,50,89],[107,110,50,91,"key"],[107,113,50,94],[107,114,50,95],[108,4,51,4],[108,10,51,10,"stateDependencies"],[108,27,51,27],[108,30,51,30],[108,34,51,30,"useRef"],[108,40,51,36],[108,41,51,36,"useRef"],[108,47,51,36],[108,49,51,37],[108,50,51,38],[108,51,51,39],[108,52,51,40],[108,53,51,41,"current"],[108,60,51,48],[109,4,52,4],[109,10,52,10,"fallback"],[109,18,52,18],[109,21,52,21],[109,25,52,21,"isUndefined"],[109,38,52,32],[109,39,52,32,"isUndefined"],[109,50,52,32],[109,52,52,33,"fallbackData"],[109,64,52,45],[109,65,52,46],[109,68,52,49,"config"],[109,74,52,55],[109,75,52,56,"fallback"],[109,83,52,64],[109,84,52,65,"key"],[109,87,52,68],[109,88,52,69],[109,91,52,72,"fallbackData"],[109,103,52,84],[110,4,53,4],[110,10,53,10,"isEqual"],[110,17,53,17],[110,20,53,20,"isEqual"],[110,21,53,21,"prev"],[110,25,53,25],[110,27,53,27,"current"],[110,34,53,34],[110,39,53,37],[111,6,54,8],[111,11,54,12],[111,17,54,18,"_"],[111,18,54,19],[111,22,54,23,"stateDependencies"],[111,39,54,40],[111,41,54,41],[112,8,55,12],[112,14,55,18,"t"],[112,15,55,19],[112,18,55,22,"_"],[112,19,55,23],[113,8,56,12],[113,12,56,16,"t"],[113,13,56,17],[113,18,56,22],[113,24,56,28],[113,26,56,30],[114,10,57,16],[114,14,57,20],[114,15,57,21,"compare"],[114,22,57,28],[114,23,57,29,"prev"],[114,27,57,33],[114,28,57,34,"t"],[114,29,57,35],[114,30,57,36],[114,32,57,38,"current"],[114,39,57,45],[114,40,57,46,"t"],[114,41,57,47],[114,42,57,48],[114,43,57,49],[114,45,57,51],[115,12,58,20],[115,16,58,24],[115,17,58,25],[115,21,58,25,"isUndefined"],[115,34,58,36],[115,35,58,36,"isUndefined"],[115,46,58,36],[115,48,58,37,"prev"],[115,52,58,41],[115,53,58,42,"t"],[115,54,58,43],[115,55,58,44],[115,56,58,45],[115,58,58,47],[116,14,59,24],[116,21,59,31],[116,26,59,36],[117,12,60,20],[118,12,61,20],[118,16,61,24],[118,17,61,25,"compare"],[118,24,61,32],[118,25,61,33,"returnedData"],[118,37,61,45],[118,39,61,47,"current"],[118,46,61,54],[118,47,61,55,"t"],[118,48,61,56],[118,49,61,57],[118,50,61,58],[118,52,61,60],[119,14,62,24],[119,21,62,31],[119,26,62,36],[120,12,63,20],[121,10,64,16],[122,8,65,12],[122,9,65,13],[122,15,65,19],[123,10,66,16],[123,14,66,20,"current"],[123,21,66,27],[123,22,66,28,"t"],[123,23,66,29],[123,24,66,30],[123,29,66,35,"prev"],[123,33,66,39],[123,34,66,40,"t"],[123,35,66,41],[123,36,66,42],[123,38,66,44],[124,12,67,20],[124,19,67,27],[124,24,67,32],[125,10,68,16],[126,8,69,12],[127,6,70,8],[128,6,71,8],[128,13,71,15],[128,17,71,19],[129,4,72,4],[129,5,72,5],[130,4,73,4],[130,10,73,10,"getSnapshot"],[130,21,73,21],[130,24,73,24],[130,28,73,24,"useMemo"],[130,34,73,31],[130,35,73,31,"useMemo"],[130,42,73,31],[130,44,73,32],[130,50,73,36],[131,6,74,8],[131,12,74,14,"shouldStartRequest"],[131,30,74,32],[131,33,74,35],[131,34,74,36],[131,40,74,40],[132,8,75,12],[132,12,75,16],[132,13,75,17,"key"],[132,16,75,20],[132,18,75,22],[132,25,75,29],[132,30,75,34],[133,8,76,12],[133,12,76,16],[133,13,76,17,"fetcher"],[133,20,76,24],[133,22,76,26],[133,29,76,33],[133,34,76,38],[134,8,77,12],[135,8,78,12],[135,12,78,16],[135,13,78,17],[135,17,78,17,"isUndefined"],[135,30,78,28],[135,31,78,28,"isUndefined"],[135,42,78,28],[135,44,78,29,"revalidateOnMount"],[135,61,78,46],[135,62,78,47],[135,64,78,49],[135,71,78,56,"revalidateOnMount"],[135,88,78,73],[136,8,79,12],[137,8,80,12],[137,12,80,16,"getConfig"],[137,21,80,25],[137,22,80,26],[137,23,80,27],[137,24,80,28,"isPaused"],[137,32,80,36],[137,33,80,37],[137,34,80,38],[137,36,80,40],[137,43,80,47],[137,48,80,52],[138,8,81,12],[138,12,81,16,"suspense"],[138,20,81,24],[138,22,81,26],[138,29,81,33],[138,34,81,38],[139,8,82,12],[139,12,82,16],[139,13,82,17],[139,17,82,17,"isUndefined"],[139,30,82,28],[139,31,82,28,"isUndefined"],[139,42,82,28],[139,44,82,29,"revalidateIfStale"],[139,61,82,46],[139,62,82,47],[139,64,82,49],[139,71,82,56,"revalidateIfStale"],[139,88,82,73],[140,8,83,12],[140,15,83,19],[140,19,83,23],[141,6,84,8],[141,7,84,9],[141,9,84,11],[141,10,84,12],[142,6,85,8],[143,6,86,8],[143,12,86,14,"getSelectedCache"],[143,28,86,30],[143,31,86,34,"state"],[143,36,86,39],[143,40,86,42],[144,8,87,12],[145,8,88,12],[145,14,88,18,"snapshot"],[145,22,88,26],[145,25,88,29],[145,29,88,29,"mergeObjects"],[145,42,88,41],[145,43,88,41,"mergeObjects"],[145,55,88,41],[145,57,88,42,"state"],[145,62,88,47],[145,63,88,48],[146,8,89,12],[146,15,89,19,"snapshot"],[146,23,89,27],[146,24,89,28,"_k"],[146,26,89,30],[147,8,90,12],[147,12,90,16],[147,13,90,17,"shouldStartRequest"],[147,31,90,35],[147,33,90,37],[148,10,91,16],[148,17,91,23,"snapshot"],[148,25,91,31],[149,8,92,12],[150,8,93,12],[150,15,93,19],[151,10,94,16,"isValidating"],[151,22,94,28],[151,24,94,30],[151,28,94,34],[152,10,95,16,"isLoading"],[152,19,95,25],[152,21,95,27],[152,25,95,31],[153,10,96,16],[153,13,96,19,"snapshot"],[154,8,97,12],[154,9,97,13],[155,6,98,8],[155,7,98,9],[156,6,99,8],[156,12,99,14,"cachedData"],[156,22,99,24],[156,25,99,27,"getCache"],[156,33,99,35],[156,34,99,36],[156,35,99,37],[157,6,100,8],[157,12,100,14,"initialData"],[157,23,100,25],[157,26,100,28,"getInitialCache"],[157,41,100,43],[157,42,100,44],[157,43,100,45],[158,6,101,8],[158,12,101,14,"clientSnapshot"],[158,26,101,28],[158,29,101,31,"getSelectedCache"],[158,45,101,47],[158,46,101,48,"cachedData"],[158,56,101,58],[158,57,101,59],[159,6,102,8],[159,12,102,14,"serverSnapshot"],[159,26,102,28],[159,29,102,31,"cachedData"],[159,39,102,41],[159,44,102,46,"initialData"],[159,55,102,57],[159,58,102,60,"clientSnapshot"],[159,72,102,74],[159,75,102,77,"getSelectedCache"],[159,91,102,93],[159,92,102,94,"initialData"],[159,103,102,105],[159,104,102,106],[160,6,103,8],[161,6,104,8],[162,6,105,8],[163,6,106,8],[163,10,106,12,"memorizedSnapshot"],[163,27,106,29],[163,30,106,32,"clientSnapshot"],[163,44,106,46],[164,6,107,8],[164,13,107,15],[164,14,108,12],[164,20,108,16],[165,8,109,16],[165,14,109,22,"newSnapshot"],[165,25,109,33],[165,28,109,36,"getSelectedCache"],[165,44,109,52],[165,45,109,53,"getCache"],[165,53,109,61],[165,54,109,62],[165,55,109,63],[165,56,109,64],[166,8,110,16],[166,14,110,22,"compareResult"],[166,27,110,35],[166,30,110,38,"isEqual"],[166,37,110,45],[166,38,110,46,"newSnapshot"],[166,49,110,57],[166,51,110,59,"memorizedSnapshot"],[166,68,110,76],[166,69,110,77],[167,8,111,16],[167,12,111,20,"compareResult"],[167,25,111,33],[167,27,111,35],[168,10,112,20],[169,10,113,20],[170,10,114,20],[171,10,115,20],[172,10,116,20],[173,10,117,20],[174,10,118,20],[175,10,119,20],[176,10,120,20],[177,10,121,20],[178,10,122,20,"memorizedSnapshot"],[178,27,122,37],[178,28,122,38,"data"],[178,32,122,42],[178,35,122,45,"newSnapshot"],[178,46,122,56],[178,47,122,57,"data"],[178,51,122,61],[179,10,123,20,"memorizedSnapshot"],[179,27,123,37],[179,28,123,38,"isLoading"],[179,37,123,47],[179,40,123,50,"newSnapshot"],[179,51,123,61],[179,52,123,62,"isLoading"],[179,61,123,71],[180,10,124,20,"memorizedSnapshot"],[180,27,124,37],[180,28,124,38,"isValidating"],[180,40,124,50],[180,43,124,53,"newSnapshot"],[180,54,124,64],[180,55,124,65,"isValidating"],[180,67,124,77],[181,10,125,20,"memorizedSnapshot"],[181,27,125,37],[181,28,125,38,"error"],[181,33,125,43],[181,36,125,46,"newSnapshot"],[181,47,125,57],[181,48,125,58,"error"],[181,53,125,63],[182,10,126,20],[182,17,126,27,"memorizedSnapshot"],[182,34,126,44],[183,8,127,16],[183,9,127,17],[183,15,127,23],[184,10,128,20,"memorizedSnapshot"],[184,27,128,37],[184,30,128,40,"newSnapshot"],[184,41,128,51],[185,10,129,20],[185,17,129,27,"newSnapshot"],[185,28,129,38],[186,8,130,16],[187,6,131,12],[187,7,131,13],[187,9,132,12],[187,15,132,16,"serverSnapshot"],[187,29,132,30],[187,30,133,9],[188,6,134,4],[189,4,135,4],[189,5,135,5],[189,7,135,7],[189,8,136,8,"cache"],[189,13,136,13],[189,15,137,8,"key"],[189,18,137,11],[189,19,138,5],[189,20,138,6],[190,4,139,4],[191,4,140,4],[191,10,140,10,"cached"],[191,16,140,16],[191,19,140,19],[191,23,140,19,"useSyncExternalStore"],[191,55,140,39],[191,56,140,39,"useSyncExternalStore"],[191,76,140,39],[191,78,140,40],[191,82,140,40,"useCallback"],[191,88,140,51],[191,89,140,51,"useCallback"],[191,100,140,51],[191,102,140,53,"callback"],[191,110,140,61],[191,114,140,64,"subscribeCache"],[191,128,140,78],[191,129,140,79,"key"],[191,132,140,82],[191,134,140,84],[191,135,140,85,"current"],[191,142,140,92],[191,144,140,94,"prev"],[191,148,140,98],[191,153,140,101],[192,6,141,12],[192,10,141,16],[192,11,141,17,"isEqual"],[192,18,141,24],[192,19,141,25,"prev"],[192,23,141,29],[192,25,141,31,"current"],[192,32,141,38],[192,33,141,39],[192,35,141,41,"callback"],[192,43,141,49],[192,44,141,50],[192,45,141,51],[193,4,142,8],[193,5,142,9],[193,6,142,10],[194,4,142,12],[195,4,143,4],[195,5,144,8,"cache"],[195,10,144,13],[195,12,145,8,"key"],[195,15,145,11],[195,16,146,5],[195,17,146,6],[195,19,146,8,"getSnapshot"],[195,30,146,19],[195,31,146,20],[195,32,146,21],[195,33,146,22],[195,35,146,24,"getSnapshot"],[195,46,146,35],[195,47,146,36],[195,48,146,37],[195,49,146,38],[195,50,146,39],[196,4,147,4],[196,10,147,10,"isInitialMount"],[196,24,147,24],[196,27,147,27],[196,28,147,28,"initialMountedRef"],[196,45,147,45],[196,46,147,46,"current"],[196,53,147,53],[197,4,148,4],[197,10,148,10,"hasRevalidator"],[197,24,148,24],[197,27,148,27,"EVENT_REVALIDATORS"],[197,45,148,45],[197,46,148,46,"key"],[197,49,148,49],[197,50,148,50],[197,54,148,54,"EVENT_REVALIDATORS"],[197,72,148,72],[197,73,148,73,"key"],[197,76,148,76],[197,77,148,77],[197,78,148,78,"length"],[197,84,148,84],[197,87,148,87],[197,88,148,88],[198,4,149,4],[198,10,149,10,"cachedData"],[198,20,149,20],[198,23,149,23,"cached"],[198,29,149,29],[198,30,149,30,"data"],[198,34,149,34],[199,4,150,4],[199,10,150,10,"data"],[199,14,150,14],[199,17,150,17],[199,21,150,17,"isUndefined"],[199,34,150,28],[199,35,150,28,"isUndefined"],[199,46,150,28],[199,48,150,29,"cachedData"],[199,58,150,39],[199,59,150,40],[199,62,150,43,"fallback"],[199,70,150,51],[199,73,150,54,"cachedData"],[199,83,150,64],[200,4,151,4],[200,10,151,10,"error"],[200,15,151,15],[200,18,151,18,"cached"],[200,24,151,24],[200,25,151,25,"error"],[200,30,151,30],[201,4,152,4],[202,4,153,4],[202,10,153,10,"laggyDataRef"],[202,22,153,22],[202,25,153,25],[202,29,153,25,"useRef"],[202,35,153,31],[202,36,153,31,"useRef"],[202,42,153,31],[202,44,153,32,"data"],[202,48,153,36],[202,49,153,37],[203,4,154,4],[203,10,154,10,"returnedData"],[203,22,154,22],[203,25,154,25,"keepPreviousData"],[203,41,154,41],[203,44,154,44],[203,48,154,44,"isUndefined"],[203,61,154,55],[203,62,154,55,"isUndefined"],[203,73,154,55],[203,75,154,56,"cachedData"],[203,85,154,66],[203,86,154,67],[203,89,154,70,"laggyDataRef"],[203,101,154,82],[203,102,154,83,"current"],[203,109,154,90],[203,112,154,93,"cachedData"],[203,122,154,103],[203,125,154,106,"data"],[203,129,154,110],[204,4,155,4],[205,4,156,4],[206,4,157,4],[207,4,158,4],[207,10,158,10,"shouldDoInitialRevalidation"],[207,37,158,37],[207,40,158,40],[207,41,158,41],[207,47,158,45],[208,6,159,8],[209,6,160,8],[209,10,160,12,"hasRevalidator"],[209,24,160,26],[209,28,160,30],[209,29,160,31],[209,33,160,31,"isUndefined"],[209,46,160,42],[209,47,160,42,"isUndefined"],[209,58,160,42],[209,60,160,43,"error"],[209,65,160,48],[209,66,160,49],[209,68,160,51],[209,75,160,58],[209,80,160,63],[210,6,161,8],[211,6,162,8],[211,10,162,12,"isInitialMount"],[211,24,162,26],[211,28,162,30],[211,29,162,31],[211,33,162,31,"isUndefined"],[211,46,162,42],[211,47,162,42,"isUndefined"],[211,58,162,42],[211,60,162,43,"revalidateOnMount"],[211,77,162,60],[211,78,162,61],[211,80,162,63],[211,87,162,70,"revalidateOnMount"],[211,104,162,87],[212,6,163,8],[213,6,164,8],[213,10,164,12,"getConfig"],[213,19,164,21],[213,20,164,22],[213,21,164,23],[213,22,164,24,"isPaused"],[213,30,164,32],[213,31,164,33],[213,32,164,34],[213,34,164,36],[213,41,164,43],[213,46,164,48],[214,6,165,8],[215,6,166,8],[216,6,167,8],[217,6,168,8],[217,10,168,12,"suspense"],[217,18,168,20],[217,20,168,22],[217,27,168,29],[217,31,168,29,"isUndefined"],[217,44,168,40],[217,45,168,40,"isUndefined"],[217,56,168,40],[217,58,168,41,"data"],[217,62,168,45],[217,63,168,46],[217,66,168,49],[217,71,168,54],[217,74,168,57,"revalidateIfStale"],[217,91,168,74],[218,6,169,8],[219,6,170,8],[220,6,171,8],[220,13,171,15],[220,17,171,15,"isUndefined"],[220,30,171,26],[220,31,171,26,"isUndefined"],[220,42,171,26],[220,44,171,27,"data"],[220,48,171,31],[220,49,171,32],[220,53,171,36,"revalidateIfStale"],[220,70,171,53],[221,4,172,4],[221,5,172,5],[221,7,172,7],[221,8,172,8],[222,4,173,4],[223,4,174,4],[224,4,175,4],[224,10,175,10,"defaultValidatingState"],[224,32,175,32],[224,35,175,35],[224,36,175,36],[224,38,175,38,"key"],[224,41,175,41],[224,45,175,45,"fetcher"],[224,52,175,52],[224,56,175,56,"isInitialMount"],[224,70,175,70],[224,74,175,74,"shouldDoInitialRevalidation"],[224,101,175,101],[224,102,175,102],[225,4,176,4],[225,10,176,10,"isValidating"],[225,22,176,22],[225,25,176,25],[225,29,176,25,"isUndefined"],[225,42,176,36],[225,43,176,36,"isUndefined"],[225,54,176,36],[225,56,176,37,"cached"],[225,62,176,43],[225,63,176,44,"isValidating"],[225,75,176,56],[225,76,176,57],[225,79,176,60,"defaultValidatingState"],[225,101,176,82],[225,104,176,85,"cached"],[225,110,176,91],[225,111,176,92,"isValidating"],[225,123,176,104],[226,4,177,4],[226,10,177,10,"isLoading"],[226,19,177,19],[226,22,177,22],[226,26,177,22,"isUndefined"],[226,39,177,33],[226,40,177,33,"isUndefined"],[226,51,177,33],[226,53,177,34,"cached"],[226,59,177,40],[226,60,177,41,"isLoading"],[226,69,177,50],[226,70,177,51],[226,73,177,54,"defaultValidatingState"],[226,95,177,76],[226,98,177,79,"cached"],[226,104,177,85],[226,105,177,86,"isLoading"],[226,114,177,95],[227,4,178,4],[228,4,179,4],[229,4,180,4],[229,10,180,10,"revalidate"],[229,20,180,20],[229,23,180,23],[229,27,180,23,"useCallback"],[229,33,180,34],[229,34,180,34,"useCallback"],[229,45,180,34],[229,47,180,35],[229,53,180,42,"revalidateOpts"],[229,67,180,56],[229,71,180,59],[230,6,181,8],[230,12,181,14,"currentFetcher"],[230,26,181,28],[230,29,181,31,"fetcherRef"],[230,39,181,41],[230,40,181,42,"current"],[230,47,181,49],[231,6,182,8],[231,10,182,12],[231,11,182,13,"key"],[231,14,182,16],[231,18,182,20],[231,19,182,21,"currentFetcher"],[231,33,182,35],[231,37,182,39,"unmountedRef"],[231,49,182,51],[231,50,182,52,"current"],[231,57,182,59],[231,61,182,63,"getConfig"],[231,70,182,72],[231,71,182,73],[231,72,182,74],[231,73,182,75,"isPaused"],[231,81,182,83],[231,82,182,84],[231,83,182,85],[231,85,182,87],[232,8,183,12],[232,15,183,19],[232,20,183,24],[233,6,184,8],[234,6,185,8],[234,10,185,12,"newData"],[234,17,185,19],[235,6,186,8],[235,10,186,12,"startAt"],[235,17,186,19],[236,6,187,8],[236,10,187,12,"loading"],[236,17,187,19],[236,20,187,22],[236,24,187,26],[237,6,188,8],[237,12,188,14,"opts"],[237,16,188,18],[237,19,188,21,"revalidateOpts"],[237,33,188,35],[237,37,188,39],[237,38,188,40],[237,39,188,41],[238,6,189,8],[239,6,190,8],[240,6,191,8],[240,12,191,14,"shouldStartNewRequest"],[240,33,191,35],[240,36,191,38],[240,37,191,39,"FETCH"],[240,42,191,44],[240,43,191,45,"key"],[240,46,191,48],[240,47,191,49],[240,51,191,53],[240,52,191,54,"opts"],[240,56,191,58],[240,57,191,59,"dedupe"],[240,63,191,65],[241,6,192,8],[242,0,193,0],[243,0,194,0],[244,0,195,0],[245,0,196,0],[246,0,197,0],[247,0,198,0],[248,0,199,0],[249,0,200,0],[250,0,201,0],[251,6,202,9],[251,12,202,15,"callbackSafeguard"],[251,29,202,32],[251,32,202,35,"callbackSafeguard"],[251,33,202,35],[251,38,202,39],[252,8,203,12],[252,12,203,16,"IS_REACT_LEGACY"],[252,25,203,31],[252,26,203,31,"IS_REACT_LEGACY"],[252,41,203,31],[252,43,203,33],[253,10,204,16],[253,17,204,23],[253,18,204,24,"unmountedRef"],[253,30,204,36],[253,31,204,37,"current"],[253,38,204,44],[253,42,204,48,"key"],[253,45,204,51],[253,50,204,56,"keyRef"],[253,56,204,62],[253,57,204,63,"current"],[253,64,204,70],[253,68,204,74,"initialMountedRef"],[253,85,204,91],[253,86,204,92,"current"],[253,93,204,99],[254,8,205,12],[255,8,206,12],[255,15,206,19,"key"],[255,18,206,22],[255,23,206,27,"keyRef"],[255,29,206,33],[255,30,206,34,"current"],[255,37,206,41],[256,6,207,8],[256,7,207,9],[257,6,208,8],[258,6,209,8],[258,12,209,14,"finalState"],[258,22,209,24],[258,25,209,27],[259,8,210,12,"isValidating"],[259,20,210,24],[259,22,210,26],[259,27,210,31],[260,8,211,12,"isLoading"],[260,17,211,21],[260,19,211,23],[261,6,212,8],[261,7,212,9],[262,6,213,8],[262,12,213,14,"finishRequestAndUpdateState"],[262,39,213,41],[262,42,213,44,"finishRequestAndUpdateState"],[262,43,213,44],[262,48,213,48],[263,8,214,12,"setCache"],[263,16,214,20],[263,17,214,21,"finalState"],[263,27,214,31],[263,28,214,32],[264,6,215,8],[264,7,215,9],[265,6,216,8],[265,12,216,14,"cleanupState"],[265,24,216,26],[265,27,216,29,"cleanupState"],[265,28,216,29],[265,33,216,33],[266,8,217,12],[267,8,218,12],[267,14,218,18,"requestInfo"],[267,25,218,29],[267,28,218,32,"FETCH"],[267,33,218,37],[267,34,218,38,"key"],[267,37,218,41],[267,38,218,42],[268,8,219,12],[268,12,219,16,"requestInfo"],[268,23,219,27],[268,27,219,31,"requestInfo"],[268,38,219,42],[268,39,219,43],[268,40,219,44],[268,41,219,45],[268,46,219,50,"startAt"],[268,53,219,57],[268,55,219,59],[269,10,220,16],[269,17,220,23,"FETCH"],[269,22,220,28],[269,23,220,29,"key"],[269,26,220,32],[269,27,220,33],[270,8,221,12],[271,6,222,8],[271,7,222,9],[272,6,223,8],[273,6,224,8],[273,12,224,14,"initialState"],[273,24,224,26],[273,27,224,29],[274,8,225,12,"isValidating"],[274,20,225,24],[274,22,225,26],[275,6,226,8],[275,7,226,9],[276,6,227,8],[277,6,228,8],[278,6,229,8],[278,10,229,12],[278,14,229,12,"isUndefined"],[278,27,229,23],[278,28,229,23,"isUndefined"],[278,39,229,23],[278,41,229,24,"getCache"],[278,49,229,32],[278,50,229,33],[278,51,229,34],[278,52,229,35,"data"],[278,56,229,39],[278,57,229,40],[278,59,229,42],[279,8,230,12,"initialState"],[279,20,230,24],[279,21,230,25,"isLoading"],[279,30,230,34],[279,33,230,37],[279,37,230,41],[280,6,231,8],[281,6,232,8],[281,10,232,12],[282,8,233,12],[282,12,233,16,"shouldStartNewRequest"],[282,33,233,37],[282,35,233,39],[283,10,234,16,"setCache"],[283,18,234,24],[283,19,234,25,"initialState"],[283,31,234,37],[283,32,234,38],[284,10,235,16],[285,10,236,16],[286,10,237,16],[286,14,237,20,"config"],[286,20,237,26],[286,21,237,27,"loadingTimeout"],[286,35,237,41],[286,39,237,45],[286,43,237,45,"isUndefined"],[286,56,237,56],[286,57,237,56,"isUndefined"],[286,68,237,56],[286,70,237,57,"getCache"],[286,78,237,65],[286,79,237,66],[286,80,237,67],[286,81,237,68,"data"],[286,85,237,72],[286,86,237,73],[286,88,237,75],[287,12,238,20,"setTimeout"],[287,22,238,30],[287,23,238,31],[287,29,238,35],[288,14,239,24],[288,18,239,28,"loading"],[288,25,239,35],[288,29,239,39,"callbackSafeguard"],[288,46,239,56],[288,47,239,57],[288,48,239,58],[288,50,239,60],[289,16,240,28,"getConfig"],[289,25,240,37],[289,26,240,38],[289,27,240,39],[289,28,240,40,"onLoadingSlow"],[289,41,240,53],[289,42,240,54,"key"],[289,45,240,57],[289,47,240,59,"config"],[289,53,240,65],[289,54,240,66],[290,14,241,24],[291,12,242,20],[291,13,242,21],[291,15,242,23,"config"],[291,21,242,29],[291,22,242,30,"loadingTimeout"],[291,36,242,44],[291,37,242,45],[292,10,243,16],[293,10,244,16],[294,10,245,16],[295,10,246,16,"FETCH"],[295,15,246,21],[295,16,246,22,"key"],[295,19,246,25],[295,20,246,26],[295,23,246,29],[295,24,247,20,"currentFetcher"],[295,38,247,34],[295,39,247,35,"fnArg"],[295,44,247,40],[295,45,247,41],[295,47,248,20],[295,51,248,20,"getTimestamp"],[295,64,248,32],[295,65,248,32,"getTimestamp"],[295,77,248,32],[295,79,248,33],[295,80,248,34],[295,81,249,17],[296,8,250,12],[297,8,251,12],[297,9,251,13,"newData"],[297,16,251,20],[297,18,251,22,"startAt"],[297,25,251,29],[297,26,251,30],[297,29,251,33,"FETCH"],[297,34,251,38],[297,35,251,39,"key"],[297,38,251,42],[297,39,251,43],[298,8,252,12,"newData"],[298,15,252,19],[298,18,252,22],[298,24,252,28,"newData"],[298,31,252,35],[299,8,253,12],[299,12,253,16,"shouldStartNewRequest"],[299,33,253,37],[299,35,253,39],[300,10,254,16],[301,10,255,16],[302,10,256,16,"setTimeout"],[302,20,256,26],[302,21,256,27,"cleanupState"],[302,33,256,39],[302,35,256,41,"config"],[302,41,256,47],[302,42,256,48,"dedupingInterval"],[302,58,256,64],[302,59,256,65],[303,8,257,12],[304,8,258,12],[305,8,259,12],[306,8,260,12],[307,8,261,12],[308,8,262,12],[309,8,263,12],[310,8,264,12],[310,12,264,16],[310,13,264,17,"FETCH"],[310,18,264,22],[310,19,264,23,"key"],[310,22,264,26],[310,23,264,27],[310,27,264,31,"FETCH"],[310,32,264,36],[310,33,264,37,"key"],[310,36,264,40],[310,37,264,41],[310,38,264,42],[310,39,264,43],[310,40,264,44],[310,45,264,49,"startAt"],[310,52,264,56],[310,54,264,58],[311,10,265,16],[311,14,265,20,"shouldStartNewRequest"],[311,35,265,41],[311,37,265,43],[312,12,266,20],[312,16,266,24,"callbackSafeguard"],[312,33,266,41],[312,34,266,42],[312,35,266,43],[312,37,266,45],[313,14,267,24,"getConfig"],[313,23,267,33],[313,24,267,34],[313,25,267,35],[313,26,267,36,"onDiscarded"],[313,37,267,47],[313,38,267,48,"key"],[313,41,267,51],[313,42,267,52],[314,12,268,20],[315,10,269,16],[316,10,270,16],[316,17,270,23],[316,22,270,28],[317,8,271,12],[318,8,272,12],[319,8,273,12,"finalState"],[319,18,273,22],[319,19,273,23,"error"],[319,24,273,28],[319,27,273,31,"UNDEFINED"],[319,40,273,40],[319,41,273,40,"UNDEFINED"],[319,50,273,40],[320,8,274,12],[321,8,275,12],[322,8,276,12],[323,8,277,12],[324,8,278,12],[325,8,279,12],[326,8,280,12],[327,8,281,12],[328,8,282,12],[329,8,283,12],[330,8,284,12],[331,8,285,12],[332,8,286,12],[332,14,286,18,"mutationInfo"],[332,26,286,30],[332,29,286,33,"MUTATION"],[332,37,286,41],[332,38,286,42,"key"],[332,41,286,45],[332,42,286,46],[333,8,287,12],[333,12,287,16],[333,13,287,17],[333,17,287,17,"isUndefined"],[333,30,287,28],[333,31,287,28,"isUndefined"],[333,42,287,28],[333,44,287,29,"mutationInfo"],[333,56,287,41],[333,57,287,42],[334,8,287,46],[335,8,288,13,"startAt"],[335,15,288,20],[335,19,288,24,"mutationInfo"],[335,31,288,36],[335,32,288,37],[335,33,288,38],[335,34,288,39],[336,8,288,43],[337,8,289,12,"startAt"],[337,15,289,19],[337,19,289,23,"mutationInfo"],[337,31,289,35],[337,32,289,36],[337,33,289,37],[337,34,289,38],[338,8,289,42],[339,8,290,12,"mutationInfo"],[339,20,290,24],[339,21,290,25],[339,22,290,26],[339,23,290,27],[339,28,290,32],[339,29,290,33],[339,30,290,34],[339,32,290,36],[340,10,291,16,"finishRequestAndUpdateState"],[340,37,291,43],[340,38,291,44],[340,39,291,45],[341,10,292,16],[341,14,292,20,"shouldStartNewRequest"],[341,35,292,41],[341,37,292,43],[342,12,293,20],[342,16,293,24,"callbackSafeguard"],[342,33,293,41],[342,34,293,42],[342,35,293,43],[342,37,293,45],[343,14,294,24,"getConfig"],[343,23,294,33],[343,24,294,34],[343,25,294,35],[343,26,294,36,"onDiscarded"],[343,37,294,47],[343,38,294,48,"key"],[343,41,294,51],[343,42,294,52],[344,12,295,20],[345,10,296,16],[346,10,297,16],[346,17,297,23],[346,22,297,28],[347,8,298,12],[348,8,299,12],[349,8,300,12],[350,8,301,12],[350,14,301,18,"cacheData"],[350,23,301,27],[350,26,301,30,"getCache"],[350,34,301,38],[350,35,301,39],[350,36,301,40],[350,37,301,41,"data"],[350,41,301,45],[351,8,302,12],[352,8,303,12],[353,8,304,12,"finalState"],[353,18,304,22],[353,19,304,23,"data"],[353,23,304,27],[353,26,304,30,"compare"],[353,33,304,37],[353,34,304,38,"cacheData"],[353,43,304,47],[353,45,304,49,"newData"],[353,52,304,56],[353,53,304,57],[353,56,304,60,"cacheData"],[353,65,304,69],[353,68,304,72,"newData"],[353,75,304,79],[354,8,305,12],[355,8,306,12],[355,12,306,16,"shouldStartNewRequest"],[355,33,306,37],[355,35,306,39],[356,10,307,16],[356,14,307,20,"callbackSafeguard"],[356,31,307,37],[356,32,307,38],[356,33,307,39],[356,35,307,41],[357,12,308,20,"getConfig"],[357,21,308,29],[357,22,308,30],[357,23,308,31],[357,24,308,32,"onSuccess"],[357,33,308,41],[357,34,308,42,"newData"],[357,41,308,49],[357,43,308,51,"key"],[357,46,308,54],[357,48,308,56,"config"],[357,54,308,62],[357,55,308,63],[358,10,309,16],[359,8,310,12],[360,6,311,8],[360,7,311,9],[360,8,311,10],[360,15,311,17,"err"],[360,18,311,20],[360,20,311,22],[361,8,312,12,"cleanupState"],[361,20,312,24],[361,21,312,25],[361,22,312,26],[362,8,313,12],[362,14,313,18,"currentConfig"],[362,27,313,31],[362,30,313,34,"getConfig"],[362,39,313,43],[362,40,313,44],[362,41,313,45],[363,8,314,12],[363,14,314,18],[364,10,314,20,"shouldRetryOnError"],[365,8,314,40],[365,9,314,41],[365,12,314,44,"currentConfig"],[365,25,314,57],[366,8,315,12],[367,8,316,12],[367,12,316,16],[367,13,316,17,"currentConfig"],[367,26,316,30],[367,27,316,31,"isPaused"],[367,35,316,39],[367,36,316,40],[367,37,316,41],[367,39,316,43],[368,10,317,16],[369,10,318,16,"finalState"],[369,20,318,26],[369,21,318,27,"error"],[369,26,318,32],[369,29,318,35,"err"],[369,32,318,38],[370,10,319,16],[371,10,320,16],[372,10,321,16],[372,14,321,20,"shouldStartNewRequest"],[372,35,321,41],[372,39,321,45,"callbackSafeguard"],[372,56,321,62],[372,57,321,63],[372,58,321,64],[372,60,321,66],[373,12,322,20,"currentConfig"],[373,25,322,33],[373,26,322,34,"onError"],[373,33,322,41],[373,34,322,42,"err"],[373,37,322,45],[373,39,322,47,"key"],[373,42,322,50],[373,44,322,52,"currentConfig"],[373,57,322,65],[373,58,322,66],[374,12,323,20],[374,16,323,24,"shouldRetryOnError"],[374,34,323,42],[374,39,323,47],[374,43,323,51],[374,47,323,55],[374,51,323,55,"isFunction"],[374,64,323,65],[374,65,323,65,"isFunction"],[374,75,323,65],[374,77,323,66,"shouldRetryOnError"],[374,95,323,84],[374,96,323,85],[374,100,323,89,"shouldRetryOnError"],[374,118,323,107],[374,119,323,108,"err"],[374,122,323,111],[374,123,323,112],[374,125,323,114],[375,14,324,24],[375,18,324,28,"isActive"],[375,26,324,36],[375,27,324,37],[375,28,324,38],[375,30,324,40],[376,16,325,28],[377,16,326,28],[378,16,327,28],[379,16,328,28,"currentConfig"],[379,29,328,41],[379,30,328,42,"onErrorRetry"],[379,42,328,54],[379,43,328,55,"err"],[379,46,328,58],[379,48,328,60,"key"],[379,51,328,63],[379,53,328,65,"currentConfig"],[379,66,328,78],[379,68,328,81,"_opts"],[379,73,328,86],[379,77,328,89],[380,18,329,32],[380,24,329,38,"revalidators"],[380,36,329,50],[380,39,329,53,"EVENT_REVALIDATORS"],[380,57,329,71],[380,58,329,72,"key"],[380,61,329,75],[380,62,329,76],[381,18,330,32],[381,22,330,36,"revalidators"],[381,34,330,48],[381,38,330,52,"revalidators"],[381,50,330,64],[381,51,330,65],[381,52,330,66],[381,53,330,67],[381,55,330,69],[382,20,331,36,"revalidators"],[382,32,331,48],[382,33,331,49],[382,34,331,50],[382,35,331,51],[382,36,331,52,"revalidateEvents"],[382,49,331,68],[382,50,331,68,"revalidateEvents"],[382,66,331,68],[382,67,331,69,"ERROR_REVALIDATE_EVENT"],[382,89,331,91],[382,91,331,93,"_opts"],[382,96,331,98],[382,97,331,99],[383,18,332,32],[384,16,333,28],[384,17,333,29],[384,19,333,31],[385,18,334,32,"retryCount"],[385,28,334,42],[385,30,334,44],[385,31,334,45,"opts"],[385,35,334,49],[385,36,334,50,"retryCount"],[385,46,334,60],[385,50,334,64],[385,51,334,65],[385,55,334,69],[385,56,334,70],[386,18,335,32,"dedupe"],[386,24,335,38],[386,26,335,40],[387,16,336,28],[387,17,336,29],[387,18,336,30],[388,14,337,24],[389,12,338,20],[390,10,339,16],[391,8,340,12],[392,6,341,8],[393,6,342,8],[394,6,343,8,"loading"],[394,13,343,15],[394,16,343,18],[394,21,343,23],[395,6,344,8],[396,6,345,8,"finishRequestAndUpdateState"],[396,33,345,35],[396,34,345,36],[396,35,345,37],[397,6,346,8],[397,13,346,15],[397,17,346,19],[398,4,347,4],[398,5,347,5],[399,4,347,7],[400,4,348,4],[401,4,349,4],[402,4,350,4],[403,4,351,4],[404,4,352,4],[405,4,353,4],[406,4,354,4],[407,4,355,4],[408,4,356,4],[409,4,357,4],[410,4,358,4],[410,5,359,8,"key"],[410,8,359,11],[410,10,360,8,"cache"],[410,15,360,13],[410,16,361,5],[410,17,361,6],[411,4,362,4],[412,4,363,4],[413,4,364,4],[414,4,365,4],[414,10,365,10,"boundMutate"],[414,21,365,21],[414,24,365,24],[414,28,365,24,"useCallback"],[414,34,365,35],[414,35,365,35,"useCallback"],[414,46,365,35],[415,4,365,36],[416,4,366,4],[416,5,366,5],[416,8,366,8,"args"],[416,12,366,12],[416,17,366,15],[417,6,367,8],[417,13,367,15],[417,17,367,15,"internalMutate"],[417,30,367,29],[417,31,367,29,"internalMutate"],[417,45,367,29],[417,47,367,30,"cache"],[417,52,367,35],[417,54,367,37,"keyRef"],[417,60,367,43],[417,61,367,44,"current"],[417,68,367,51],[417,70,367,53],[417,73,367,56,"args"],[417,77,367,60],[417,78,367,61],[418,4,368,4],[418,5,368,5],[419,4,368,7],[420,4,369,4],[420,6,369,6],[420,7,369,7],[421,4,370,4],[422,4,371,4],[422,8,371,4,"useIsomorphicLayoutEffect"],[422,21,371,29],[422,22,371,29,"useIsomorphicLayoutEffect"],[422,47,371,29],[422,49,371,30],[422,55,371,34],[423,6,372,8,"fetcherRef"],[423,16,372,18],[423,17,372,19,"current"],[423,24,372,26],[423,27,372,29,"fetcher"],[423,34,372,36],[424,6,373,8,"configRef"],[424,15,373,17],[424,16,373,18,"current"],[424,23,373,25],[424,26,373,28,"config"],[424,32,373,34],[425,6,374,8],[426,6,375,8],[427,6,376,8],[427,10,376,12],[427,11,376,13],[427,15,376,13,"isUndefined"],[427,28,376,24],[427,29,376,24,"isUndefined"],[427,40,376,24],[427,42,376,25,"cachedData"],[427,52,376,35],[427,53,376,36],[427,55,376,38],[428,8,377,12,"laggyDataRef"],[428,20,377,24],[428,21,377,25,"current"],[428,28,377,32],[428,31,377,35,"cachedData"],[428,41,377,45],[429,6,378,8],[430,4,379,4],[430,5,379,5],[430,6,379,6],[431,4,380,4],[432,4,381,4],[432,8,381,4,"useIsomorphicLayoutEffect"],[432,21,381,29],[432,22,381,29,"useIsomorphicLayoutEffect"],[432,47,381,29],[432,49,381,30],[432,55,381,34],[433,6,382,8],[433,10,382,12],[433,11,382,13,"key"],[433,14,382,16],[433,16,382,18],[434,6,383,8],[434,12,383,14,"softRevalidate"],[434,26,383,28],[434,29,383,31,"revalidate"],[434,39,383,41],[434,40,383,42,"bind"],[434,44,383,46],[434,45,383,47,"UNDEFINED"],[434,58,383,56],[434,59,383,56,"UNDEFINED"],[434,68,383,56],[434,70,383,58,"WITH_DEDUPE"],[434,81,383,69],[434,82,383,70],[435,6,384,8],[436,6,385,8],[437,6,386,8],[437,10,386,12,"nextFocusRevalidatedAt"],[437,32,386,34],[437,35,386,37],[437,36,386,38],[438,6,387,8],[438,12,387,14,"onRevalidate"],[438,24,387,26],[438,27,387,29,"onRevalidate"],[438,28,387,30,"type"],[438,32,387,34],[438,34,387,36,"opts"],[438,38,387,40],[438,41,387,43],[438,42,387,44],[438,43,387,45],[438,48,387,48],[439,8,388,12],[439,12,388,16,"type"],[439,16,388,20],[439,20,388,24,"revalidateEvents"],[439,33,388,40],[439,34,388,40,"revalidateEvents"],[439,50,388,40],[439,51,388,41,"FOCUS_EVENT"],[439,62,388,52],[439,64,388,54],[440,10,389,16],[440,16,389,22,"now"],[440,19,389,25],[440,22,389,28,"Date"],[440,26,389,32],[440,27,389,33,"now"],[440,30,389,36],[440,31,389,37],[440,32,389,38],[441,10,390,16],[441,14,390,20,"getConfig"],[441,23,390,29],[441,24,390,30],[441,25,390,31],[441,26,390,32,"revalidateOnFocus"],[441,43,390,49],[441,47,390,53,"now"],[441,50,390,56],[441,53,390,59,"nextFocusRevalidatedAt"],[441,75,390,81],[441,79,390,85,"isActive"],[441,87,390,93],[441,88,390,94],[441,89,390,95],[441,91,390,97],[442,12,391,20,"nextFocusRevalidatedAt"],[442,34,391,42],[442,37,391,45,"now"],[442,40,391,48],[442,43,391,51,"getConfig"],[442,52,391,60],[442,53,391,61],[442,54,391,62],[442,55,391,63,"focusThrottleInterval"],[442,76,391,84],[443,12,392,20,"softRevalidate"],[443,26,392,34],[443,27,392,35],[443,28,392,36],[444,10,393,16],[445,8,394,12],[445,9,394,13],[445,15,394,19],[445,19,394,23,"type"],[445,23,394,27],[445,27,394,31,"revalidateEvents"],[445,40,394,47],[445,41,394,47,"revalidateEvents"],[445,57,394,47],[445,58,394,48,"RECONNECT_EVENT"],[445,73,394,63],[445,75,394,65],[446,10,395,16],[446,14,395,20,"getConfig"],[446,23,395,29],[446,24,395,30],[446,25,395,31],[446,26,395,32,"revalidateOnReconnect"],[446,47,395,53],[446,51,395,57,"isActive"],[446,59,395,65],[446,60,395,66],[446,61,395,67],[446,63,395,69],[447,12,396,20,"softRevalidate"],[447,26,396,34],[447,27,396,35],[447,28,396,36],[448,10,397,16],[449,8,398,12],[449,9,398,13],[449,15,398,19],[449,19,398,23,"type"],[449,23,398,27],[449,27,398,31,"revalidateEvents"],[449,40,398,47],[449,41,398,47,"revalidateEvents"],[449,57,398,47],[449,58,398,48,"MUTATE_EVENT"],[449,70,398,60],[449,72,398,62],[450,10,399,16],[450,17,399,23,"revalidate"],[450,27,399,33],[450,28,399,34],[450,29,399,35],[451,8,400,12],[451,9,400,13],[451,15,400,19],[451,19,400,23,"type"],[451,23,400,27],[451,27,400,31,"revalidateEvents"],[451,40,400,47],[451,41,400,47,"revalidateEvents"],[451,57,400,47],[451,58,400,48,"ERROR_REVALIDATE_EVENT"],[451,80,400,70],[451,82,400,72],[452,10,401,16],[452,17,401,23,"revalidate"],[452,27,401,33],[452,28,401,34,"opts"],[452,32,401,38],[452,33,401,39],[453,8,402,12],[454,8,403,12],[455,6,404,8],[455,7,404,9],[456,6,405,8],[456,12,405,14,"unsubEvents"],[456,23,405,25],[456,26,405,28],[456,30,405,28,"subscribeCallback"],[456,43,405,45],[456,44,405,45,"subscribeCallback"],[456,61,405,45],[456,63,405,46,"key"],[456,66,405,49],[456,68,405,51,"EVENT_REVALIDATORS"],[456,86,405,69],[456,88,405,71,"onRevalidate"],[456,100,405,83],[456,101,405,84],[457,6,406,8],[458,6,407,8,"unmountedRef"],[458,18,407,20],[458,19,407,21,"current"],[458,26,407,28],[458,29,407,31],[458,34,407,36],[459,6,408,8,"keyRef"],[459,12,408,14],[459,13,408,15,"current"],[459,20,408,22],[459,23,408,25,"key"],[459,26,408,28],[460,6,409,8,"initialMountedRef"],[460,23,409,25],[460,24,409,26,"current"],[460,31,409,33],[460,34,409,36],[460,38,409,40],[461,6,410,8],[462,6,411,8,"setCache"],[462,14,411,16],[462,15,411,17],[463,8,412,12,"_k"],[463,10,412,14],[463,12,412,16,"fnArg"],[464,6,413,8],[464,7,413,9],[464,8,413,10],[465,6,414,8],[466,6,415,8],[466,10,415,12,"shouldDoInitialRevalidation"],[466,37,415,39],[466,39,415,41],[467,8,416,12],[467,12,416,16],[467,16,416,16,"isUndefined"],[467,29,416,27],[467,30,416,27,"isUndefined"],[467,41,416,27],[467,43,416,28,"data"],[467,47,416,32],[467,48,416,33],[467,52,416,37,"IS_SERVER"],[467,65,416,46],[467,66,416,46,"IS_SERVER"],[467,75,416,46],[467,77,416,48],[468,10,417,16],[469,10,418,16,"softRevalidate"],[469,24,418,30],[469,25,418,31],[469,26,418,32],[470,8,419,12],[470,9,419,13],[470,15,419,19],[471,10,420,16],[472,10,421,16],[473,10,422,16],[473,14,422,16,"rAF"],[473,27,422,19],[473,28,422,19,"rAF"],[473,31,422,19],[473,33,422,20,"softRevalidate"],[473,47,422,34],[473,48,422,35],[474,8,423,12],[475,6,424,8],[476,6,425,8],[476,13,425,15],[476,19,425,19],[477,8,426,12],[478,8,427,12,"unmountedRef"],[478,20,427,24],[478,21,427,25,"current"],[478,28,427,32],[478,31,427,35],[478,35,427,39],[479,8,428,12,"unsubEvents"],[479,19,428,23],[479,20,428,24],[479,21,428,25],[480,6,429,8],[480,7,429,9],[481,4,430,4],[481,5,430,5],[481,7,430,7],[481,8,431,8,"key"],[481,11,431,11],[481,12,432,5],[481,13,432,6],[482,4,433,4],[483,4,434,4],[483,8,434,4,"useIsomorphicLayoutEffect"],[483,21,434,29],[483,22,434,29,"useIsomorphicLayoutEffect"],[483,47,434,29],[483,49,434,30],[483,55,434,34],[484,6,435,8],[484,10,435,12,"timer"],[484,15,435,17],[485,6,436,8],[485,15,436,17,"next"],[485,19,436,21,"next"],[485,20,436,21],[485,22,436,24],[486,8,437,12],[487,8,438,12],[488,8,439,12],[488,14,439,18,"interval"],[488,22,439,26],[488,25,439,29],[488,29,439,29,"isFunction"],[488,42,439,39],[488,43,439,39,"isFunction"],[488,53,439,39],[488,55,439,40,"refreshInterval"],[488,70,439,55],[488,71,439,56],[488,74,439,59,"refreshInterval"],[488,89,439,74],[488,90,439,75,"getCache"],[488,98,439,83],[488,99,439,84],[488,100,439,85],[488,101,439,86,"data"],[488,105,439,90],[488,106,439,91],[488,109,439,94,"refreshInterval"],[488,124,439,109],[489,8,440,12],[490,8,441,12],[491,8,442,12],[492,8,443,12],[492,12,443,16,"interval"],[492,20,443,24],[492,24,443,28,"timer"],[492,29,443,33],[492,34,443,38],[492,35,443,39],[492,36,443,40],[492,38,443,42],[493,10,444,16,"timer"],[493,15,444,21],[493,18,444,24,"setTimeout"],[493,28,444,34],[493,29,444,35,"execute"],[493,36,444,42],[493,38,444,44,"interval"],[493,46,444,52],[493,47,444,53],[494,8,445,12],[495,6,446,8],[496,6,447,8],[496,15,447,17,"execute"],[496,22,447,24,"execute"],[496,23,447,24],[496,25,447,27],[497,8,448,12],[498,8,449,12],[499,8,450,12],[499,12,450,16],[499,13,450,17,"getCache"],[499,21,450,25],[499,22,450,26],[499,23,450,27],[499,24,450,28,"error"],[499,29,450,33],[499,34,450,38,"refreshWhenHidden"],[499,51,450,55],[499,55,450,59,"getConfig"],[499,64,450,68],[499,65,450,69],[499,66,450,70],[499,67,450,71,"isVisible"],[499,76,450,80],[499,77,450,81],[499,78,450,82],[499,79,450,83],[499,84,450,88,"refreshWhenOffline"],[499,102,450,106],[499,106,450,110,"getConfig"],[499,115,450,119],[499,116,450,120],[499,117,450,121],[499,118,450,122,"isOnline"],[499,126,450,130],[499,127,450,131],[499,128,450,132],[499,129,450,133],[499,131,450,135],[500,10,451,16,"revalidate"],[500,20,451,26],[500,21,451,27,"WITH_DEDUPE"],[500,32,451,38],[500,33,451,39],[500,34,451,40,"then"],[500,38,451,44],[500,39,451,45,"next"],[500,43,451,49],[500,44,451,50],[501,8,452,12],[501,9,452,13],[501,15,452,19],[502,10,453,16],[503,10,454,16,"next"],[503,14,454,20],[503,15,454,21],[503,16,454,22],[504,8,455,12],[505,6,456,8],[506,6,457,8,"next"],[506,10,457,12],[506,11,457,13],[506,12,457,14],[507,6,458,8],[507,13,458,15],[507,19,458,19],[508,8,459,12],[508,12,459,16,"timer"],[508,17,459,21],[508,19,459,23],[509,10,460,16,"clearTimeout"],[509,22,460,28],[509,23,460,29,"timer"],[509,28,460,34],[509,29,460,35],[510,10,461,16,"timer"],[510,15,461,21],[510,18,461,24],[510,19,461,25],[510,20,461,26],[511,8,462,12],[512,6,463,8],[512,7,463,9],[513,4,464,4],[513,5,464,5],[513,7,464,7],[513,8,465,8,"refreshInterval"],[513,23,465,23],[513,25,466,8,"refreshWhenHidden"],[513,42,466,25],[513,44,467,8,"refreshWhenOffline"],[513,62,467,26],[513,64,468,8,"key"],[513,67,468,11],[513,68,469,5],[513,69,469,6],[514,4,470,4],[515,4,471,4],[515,8,471,4,"useDebugValue"],[515,14,471,17],[515,15,471,17,"useDebugValue"],[515,28,471,17],[515,30,471,18,"returnedData"],[515,42,471,30],[515,43,471,31],[516,4,472,4],[517,4,473,4],[518,4,474,4],[519,4,475,4],[520,4,476,4],[520,8,476,8,"suspense"],[520,16,476,16],[520,20,476,20],[520,24,476,20,"isUndefined"],[520,37,476,31],[520,38,476,31,"isUndefined"],[520,49,476,31],[520,51,476,32,"data"],[520,55,476,36],[520,56,476,37],[520,60,476,41,"key"],[520,63,476,44],[520,65,476,46],[521,6,477,8],[522,6,478,8],[523,6,479,8],[524,6,480,8],[524,10,480,12],[524,11,480,13,"IS_REACT_LEGACY"],[524,24,480,28],[524,25,480,28,"IS_REACT_LEGACY"],[524,40,480,28],[524,44,480,32,"IS_SERVER"],[524,57,480,41],[524,58,480,41,"IS_SERVER"],[524,67,480,41],[524,69,480,43],[525,8,481,12],[525,14,481,18],[525,18,481,22,"Error"],[525,23,481,27],[525,24,481,28],[525,79,481,83],[525,80,481,84],[526,6,482,8],[527,6,483,8],[528,6,484,8,"fetcherRef"],[528,16,484,18],[528,17,484,19,"current"],[528,24,484,26],[528,27,484,29,"fetcher"],[528,34,484,36],[529,6,485,8,"configRef"],[529,15,485,17],[529,16,485,18,"current"],[529,23,485,25],[529,26,485,28,"config"],[529,32,485,34],[530,6,486,8,"unmountedRef"],[530,18,486,20],[530,19,486,21,"current"],[530,26,486,28],[530,29,486,31],[530,34,486,36],[531,6,487,8],[531,12,487,14,"req"],[531,15,487,17],[531,18,487,20,"PRELOAD"],[531,25,487,27],[531,26,487,28,"key"],[531,29,487,31],[531,30,487,32],[532,6,488,8],[532,10,488,12],[532,11,488,13],[532,15,488,13,"isUndefined"],[532,28,488,24],[532,29,488,24,"isUndefined"],[532,40,488,24],[532,42,488,25,"req"],[532,45,488,28],[532,46,488,29],[532,48,488,31],[533,8,489,12],[533,14,489,18,"promise"],[533,21,489,25],[533,24,489,28,"boundMutate"],[533,35,489,39],[533,36,489,40,"req"],[533,39,489,43],[533,40,489,44],[534,8,490,12,"use"],[534,11,490,15],[534,12,490,16,"promise"],[534,19,490,23],[534,20,490,24],[535,6,491,8],[536,6,492,8],[536,10,492,12],[536,14,492,12,"isUndefined"],[536,27,492,23],[536,28,492,23,"isUndefined"],[536,39,492,23],[536,41,492,24,"error"],[536,46,492,29],[536,47,492,30],[536,49,492,32],[537,8,493,12],[537,14,493,18,"promise"],[537,21,493,25],[537,24,493,28,"revalidate"],[537,34,493,38],[537,35,493,39,"WITH_DEDUPE"],[537,46,493,50],[537,47,493,51],[538,8,494,12],[538,12,494,16],[538,13,494,17],[538,17,494,17,"isUndefined"],[538,30,494,28],[538,31,494,28,"isUndefined"],[538,42,494,28],[538,44,494,29,"returnedData"],[538,56,494,41],[538,57,494,42],[538,59,494,44],[539,10,495,16,"promise"],[539,17,495,23],[539,18,495,24,"status"],[539,24,495,30],[539,27,495,33],[539,38,495,44],[540,10,496,16,"promise"],[540,17,496,23],[540,18,496,24,"value"],[540,23,496,29],[540,26,496,32],[540,30,496,36],[541,8,497,12],[542,8,498,12,"use"],[542,11,498,15],[542,12,498,16,"promise"],[542,19,498,23],[542,20,498,24],[543,6,499,8],[543,7,499,9],[543,13,499,15],[544,8,500,12],[544,14,500,18,"error"],[544,19,500,23],[545,6,501,8],[546,4,502,4],[547,4,503,4],[547,11,503,11],[548,6,504,8,"mutate"],[548,12,504,14],[548,14,504,16,"boundMutate"],[548,25,504,27],[549,6,505,8],[549,10,505,12,"data"],[549,14,505,16,"data"],[549,15,505,16],[549,17,505,20],[550,8,506,12,"stateDependencies"],[550,25,506,29],[550,26,506,30,"data"],[550,30,506,34],[550,33,506,37],[550,37,506,41],[551,8,507,12],[551,15,507,19,"returnedData"],[551,27,507,31],[552,6,508,8],[552,7,508,9],[553,6,509,8],[553,10,509,12,"error"],[553,15,509,17,"error"],[553,16,509,17],[553,18,509,21],[554,8,510,12,"stateDependencies"],[554,25,510,29],[554,26,510,30,"error"],[554,31,510,35],[554,34,510,38],[554,38,510,42],[555,8,511,12],[555,15,511,19,"error"],[555,20,511,24],[556,6,512,8],[556,7,512,9],[557,6,513,8],[557,10,513,12,"isValidating"],[557,22,513,24,"isValidating"],[557,23,513,24],[557,25,513,28],[558,8,514,12,"stateDependencies"],[558,25,514,29],[558,26,514,30,"isValidating"],[558,38,514,42],[558,41,514,45],[558,45,514,49],[559,8,515,12],[559,15,515,19,"isValidating"],[559,27,515,31],[560,6,516,8],[560,7,516,9],[561,6,517,8],[561,10,517,12,"isLoading"],[561,19,517,21,"isLoading"],[561,20,517,21],[561,22,517,25],[562,8,518,12,"stateDependencies"],[562,25,518,29],[562,26,518,30,"isLoading"],[562,35,518,39],[562,38,518,42],[562,42,518,46],[563,8,519,12],[563,15,519,19,"isLoading"],[563,24,519,28],[564,6,520,8],[565,4,521,4],[565,5,521,5],[566,2,522,0],[566,3,522,1],[567,2,523,0],[567,8,523,6,"SWRConfig"],[567,17,523,15],[567,20,523,18,"OBJECT"],[567,33,523,24],[567,34,523,24,"OBJECT"],[567,40,523,24],[567,41,523,25,"defineProperty"],[567,55,523,39],[567,56,523,40,"SWRConfig$1"],[567,69,523,51],[567,70,523,51,"SWRConfig"],[567,79,523,51],[567,81,523,53],[567,95,523,67],[567,97,523,69],[568,4,524,4,"value"],[568,9,524,9],[568,11,524,11,"defaultConfig"],[568,24,524,24],[568,25,524,24,"defaultConfig"],[569,2,525,0],[569,3,525,1],[569,4,525,2],[570,2,526,0],[571,0,527,0],[572,0,528,0],[573,0,529,0],[574,0,530,0],[575,0,531,0],[576,0,532,0],[577,0,533,0],[578,0,534,0],[579,0,535,0],[580,0,536,0],[581,0,537,0],[582,0,538,0],[583,0,539,0],[584,0,540,0],[585,2,540,4],[585,8,540,10,"useSWR"],[585,14,540,16],[585,17,540,19],[585,21,540,19,"withArgs"],[585,34,540,27],[585,35,540,27,"withArgs"],[585,43,540,27],[585,45,540,28,"useSWRHandler"],[585,58,540,41],[585,59,540,42],[587,2,542,0],[588,0,542,0],[588,3]],"functionMap":{"names":["<global>","unstable_serialize","<anonymous>","promise.then$argument_0","promise.then$argument_1","useSWRHandler","getConfig","isActive","isEqual","useMemo$argument_0","getSelectedCache","useSyncExternalStore$argument_0","subscribeCache$argument_1","revalidate","callbackSafeguard","finishRequestAndUpdateState","cleanupState","setTimeout$argument_0","currentConfig.onErrorRetry$argument_3","boundMutate","useIsomorphicLayoutEffect$argument_0","onRevalidate","next","execute","get__data","get__error","get__isValidating","get__isLoading"],"mappings":"AAA;2BCK,wBD;iCEG;qBCS;SDG,EE;SFG;CFG;sBKI;sBCiB,qBD;qBEC,qDF;oBGI;KHmB;gCIC;oCPC;SOU;iCCE;SDY;YPU;aOuB;YPC,kBO;KJG;oDMK,gCC;SDE,CN;yCHgB;KGc;mCQQ;mCCsB;SDK;4CEM;SFE;6BGC;SHM;+BIgB;qBJI;gFKsF;6BLK;KRc;IcmB;KdE;8BeG;KfQ;8BeE;6BCM;SDiB;elBqB;SkBI;KfC;8BeI;QEE;SFU;QGC;SHS;elBE;SkBK;KfC;QmByC;SnBG;QoBC;SpBG;QqBC;SrBG;QsBC;StBG;CLE"},"hasCjsExports":false},"type":"js/module"}]}